<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>umcconnell</title>
    <subtitle>Just my personal website</subtitle>
    <link href="https://umcconnell.github.io/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://umcconnell.github.io" rel="alternate" type="text/html"/>
    <author>
        <name>umcconnell</name>
    </author>
    
    <updated>2021-03-31T00:00:00Z</updated>
    
    <id>https://umcconnell.github.io/</id>
        <entry>
            <title>Meta Blog: Advanced</title>
            <link href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/"/>
            <updated>2021-03-31T00:00:00Z</updated>
            <id>https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/</id>
            <content type="html"><![CDATA[
                <p><a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/">Part 1</a> of this series went through the
basic setup and customization of this blog for your own purposes. In this part,
I will go through a few technical details, tips and additional notes, that can
allow you to extend the site and troubleshoot errors. This part can also serve
as a project reference or documentation of some sort.</p>
<h2 id="overview" tabindex="-1">Overview<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#overview" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>Before we go into detail about different aspects of the website, here’s a quick
overview of all the different folders and what they contain:</p>
<pre><code>.
├── config               Configuration for plugins (e.g. markdown-it, KaTeX)
├── src
│  ├── assets            Website assets
│  │  ├── fonts
│  │  ├── icons
│  │  ├── images
│  │  │  ├── favicon     Icons and images for Web App
│  │  │  └── posts       Images in posts
│  │  ├── other          Other assets (e.g. PGP key)
│  │  ├── scripts        JavaScript
│  │  │  └── modules
│  │  └── styles
│  │     ├── base        Base styles (e.g. markdown, CSS reset)
│  │     ├── components  Styling for various components
│  │     └── utils       CSS utilities
│  ├── components        Nunjucks components (e.g. card, tags)
│  ├── data              Website metadata
│  ├── includes          Nunjucks includes (e.g. footer, navbar)
│  ├── layouts           Nunjucks page layouts (e.g. base, post)
│  ├── pages             Concrete pages (e.g. about, post archive)
│  └── posts             Markdown posts
└── utils                JS utilities (e.g. filters, shortcodes)
</code></pre>
<h2 id="styling" tabindex="-1">Styling<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#styling" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>Styling is done using <a href="https://sass-lang.com/" target="_blank" rel="noopener noreferrer">SCSS<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>. All stylesheets are
located in
<a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/src/assets/styles" target="_blank" rel="noopener noreferrer"><code>src/assets/styles</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>.
The styles are then imported and bundled in <code>main.scss</code>.</p>
<p>The styles are grouped into three main folders:</p>
<ul>
<li>
<p><a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/src/assets/styles/base/" target="_blank" rel="noopener noreferrer"><code>base</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>:
The base styling comprises basic stylesheets used globally throughout the
page, such as normalization or typography. These styles are very generic,
meaning you probably want to modify styles in different places, such as the
<code>components/</code> folder for specific components.</p>
</li>
<li>
<p><a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/src/assets/styles/components/" target="_blank" rel="noopener noreferrer"><code>components</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>:
These styles consist of more specific styles tailored to certain components,
such as the footer, the navigation or the post tags. This is probably the
best place to modify or add new styles when customizing the website.</p>
</li>
<li>
<p><a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/src/assets/styles/utils/" target="_blank" rel="noopener noreferrer"><code>utils</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>:
The utilities are mostly SCSS-specific functions, that make use of SCSS’s
scripting features. This is also where the global variables for colors,
breakpoints, etc. are defined for the entire page.</p>
</li>
</ul>
<p>The compilation process, including minification, and error handling is defined
in the
<a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/src/assets/styles/styles.11ty.js" target="_blank" rel="noopener noreferrer"><code>styles.11ty.js</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>
file. In practice, you shouldn’t need to modify this file.</p>
<h3 id="theming" tabindex="-1">Theming<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#theming" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>The blog supports adaptive light and dark themes out of the box (based on the
<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme" target="_blank" rel="noopener noreferrer"><code>prefers-color-scheme</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>
media query). The different color palettes are defined in
<a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/src/assets/styles/utils/_variables.scss" target="_blank" rel="noopener noreferrer"><code>_variables.scss</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>
under the <code>$themes</code> key.</p>
<p>Individual properties are themed using the <code>t</code> SCSS
<a href="https://sass-lang.com/documentation/at-rules/mixin" target="_blank" rel="noopener noreferrer">mixin<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>. This is for example
how links are themed throughout the blog:</p>
<pre class="language-scss"><code class="language-scss"><span class="token selector">a </span><span class="token punctuation">{</span><br />    <span class="token keyword">@include</span> <span class="token function">t</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token string">'link-color'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span><br /><span class="token punctuation">}</span></code></pre>
<p>The mixin takes a CSS property as the first argument, followed by a variable
name referencing the desired color. This name refers to a field from the
<code>$themes</code> map, which means you can only refer to colors defined as part of a
theme. The mixin takes additional optional arguments, which you can find in the
<a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/src/assets/styles/utils/_mixins.scss#L40" target="_blank" rel="noopener noreferrer">mixin’s source<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>.</p>
<h3 id="breakpoints" tabindex="-1">Breakpoints<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#breakpoints" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>Breakpoints are also quickly defined using SCSS mixins. There are two mixins,
<code>mq</code> and <code>mq-down</code>, which provide breakpoints starting at, and going up to, a
certain width.</p>
<p>The mixins take the name of a breakpoint, as defined in the global variables. An
example use of breakpoints is when styling the navbar. The following declaration
hides the navigation burger menu for large screens (starting at 940px in width)
and up:</p>
<pre class="language-scss"><code class="language-scss"><span class="token keyword">@include</span> <span class="token function">mq</span><span class="token punctuation">(</span>lg<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    <span class="token selector"><span class="token parent important">&amp;</span>__toggle </span><span class="token punctuation">{</span><br />        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br />    <span class="token comment">// ...</span><br /><span class="token punctuation">}</span></code></pre>
<h2 id="markdown" tabindex="-1">Markdown<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#markdown" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>Markdown files are compiled using <a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="noopener noreferrer">markdown-it<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>.
The configurations for markdown-it and it’s plugins are located in the
<a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/config/" target="_blank" rel="noopener noreferrer"><code>config/</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a> folder.</p>
<p>The styles for Markdown documents, such as posts, are located in
<a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/src/assets/styles/base/_markdown.scss" target="_blank" rel="noopener noreferrer"><code>src/assets/styles/base/_markdown.scss</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>.
Note that Markdown documents must be wrapped in an element with class
<code>.markdown</code> for the styles to take effect. You can thus use the Markdown styles
in HTML/Nunjucks files by wrapping sections in such an element.</p>
<h3 id="plugins" tabindex="-1">Plugins<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#plugins" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>The following markdown-it plugins are used in this blog:</p>
<ul>
<li><a href="https://www.npmjs.com/package/markdown-it-anchor" target="_blank" rel="noopener noreferrer">markdown-it-anchor<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a></li>
<li><a href="https://www.npmjs.com/package/@iktakahiro/markdown-it-katex" target="_blank" rel="noopener noreferrer">@iktakahiro/markdown-it-katex<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a></li>
</ul>
<p>Additionally, two custom plugins, one for the arrow icons after external links,
and one for the anchor links when hovering over headings, are implemented in the
config folder.</p>
<h3 id="posts" tabindex="-1">Posts<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#posts" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>The blog supports several non-standard additions to Markdown, that add
blog-specific functionality to your posts.</p>
<h4 id="nunjucks-expressions" tabindex="-1">Nunjucks expressions<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#nunjucks-expressions" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h4><p>You can write Nunjucks markup directly in your markdown posts, just as you would
in the other pages. Just wrap the expression between two curly braces:
<code>{{ Nunjucks expression }}</code>. For example, you can conveniently link to
the page’s code repository, directly in Markdown, like this:</p>
<pre class="language-md"><code class="language-md">You can find the source code [here]({{ meta.code.repo }}).</code></pre>
<p>This gives:</p>
<p>You can find the source code <a href="https://github.com/umcconnell/umcconnell.github.io" target="_blank" rel="noopener noreferrer">here<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>.</p>
<h4 id="shortcodes" tabindex="-1">Shortcodes<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#shortcodes" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h4><p>Shortcodes are another very practical feature of Nunjucks in Markdown. All
shortcodes are defined in
<a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/utils/shortcodes.js" target="_blank" rel="noopener noreferrer"><code>utils/shortcodes.js</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>, and you can
add more. Shortcodes expand to a longer parameterized expression.</p>
<p>Standard shortcodes only take arguments, such as in this example:</p>
<pre class="language-md"><code class="language-md">{% 'icon pencil' %}</code></pre>
<p>This produces an SVG element: <svg class="icon icon--pencil" role="img" aria-hidden="true" width="24" height="24">
<use xlink:href="#icon-pencil"></use>
</svg></p>
<p>The standard shortcodes available out of the box are:</p>
<ul>
<li><code>icon</code> to embed icons from <code>src/assets/icons/</code></li>
<li><code>ytvideo</code> to embed YouTube videos based on their id</li>
</ul>
<p>There are also paired shortcodes, that wrap a markup section, such as this one:</p>
<pre class="language-md"><code class="language-md">{% msg 'info' %}<br /><br />An informative message that <span class="token bold"><span class="token punctuation">**</span><span class="token content">even</span><span class="token punctuation">**</span></span> supports <span class="token italic"><span class="token punctuation">_</span><span class="token content">Markdown</span><span class="token punctuation">_</span></span>!<br /><br />{% endmsg %}</code></pre>
<p>This produces the following:</p>
<div class="msg msg--info">
        <div class="msg__header">INFO</div>
<p>An informative message that <strong>even</strong> supports <em>Markdown</em>!</p>
</div>
<p>The paired shortcodes available out of the box are:</p>
<ul>
<li><code>msg</code> for message boxes</li>
<li><code>details</code> for an expandable HTML summary/details element</li>
</ul>
<h4 id="katex" tabindex="-1">KaTeX<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#katex" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h4><p>You can also include math expressions in your post. The expressions are compiled
using <a href="https://katex.org/" target="_blank" rel="noopener noreferrer">KaTeX<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>, which allows you to write TeX-like
expressions. All KaTeX configurations are located in
<a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/config/markdown-it/katex.js" target="_blank" rel="noopener noreferrer"><code>config/markdown-it/katex.js</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>.</p>
<p>For inline math expressions, wrap your code in single dollar signs: <code>$math$</code>.
For example, you can easily include fractions:</p>
<pre class="language-md"><code class="language-md">A fraction $\frac{a}{b}$ includes a numerator $a$ and a denominator $b$.</code></pre>
<p>This produces the following text:</p>
<p>A fraction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>a</mi><mi>b</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{a}{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> includes a numerator <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span></span></span></span> and a denominator <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span>.</p>
<p>For blocks of math, wrap your code in double dollar signs: <code>$$ math $$</code>.
For example, you can display Euler’s identity:</p>
<pre class="language-md"><code class="language-md">Euler's identity:<br />$$e^{i \pi} = -1$$</code></pre>
<p>This results in:</p>
<p>Euler’s identity:</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>e</mi><mrow><mi>i</mi><mi>π</mi></mrow></msup><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">e^{i \pi} = -1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8746639999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span></span></p>
<p>You can find all supported expressions and formatting options in the
<a href="https://katex.org/docs/supported.html" target="_blank" rel="noopener noreferrer">KaTeX docs<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>.</p>
<h2 id="nunjucks" tabindex="-1">Nunjucks<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#nunjucks" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p><a href="https://mozilla.github.io/nunjucks/" target="_blank" rel="noopener noreferrer">Nunjucks<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a> is used as the templating
language for the blog.</p>
<p>There are several places where Nunjucks is used:</p>
<ul>
<li>
<p><a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/src/components/" target="_blank" rel="noopener noreferrer"><code>src/components/</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>:
Nunjucks allows imports of so-called
<a href="https://mozilla.github.io/nunjucks/templating.html#macro" target="_blank" rel="noopener noreferrer">macros<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>, which
are used to represent the components. Macros are similar to functions and
accept arguments to construct a parameterized output.</p>
</li>
<li>
<p><a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/src/includes/" target="_blank" rel="noopener noreferrer"><code>src/includes/</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>:
Nunjucks’
<a href="https://mozilla.github.io/nunjucks/templating.html#include" target="_blank" rel="noopener noreferrer">includes<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a> allow
you to literally include chunks of markup as reusable units. This is used
for non-variant parts of the website, such as the footer, header, etc…</p>
</li>
<li>
<p><a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/src/layouts/" target="_blank" rel="noopener noreferrer"><code>src/layouts/</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>:
Layouts are page skeletons that are used as a common base among pages.
The base layout is the HTML skeleton for all other pages and layouts.
The post layout extends this base layout to include additional stylesheets
for code highlighting or the utterances comment widget.</p>
</li>
<li>
<p><a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/src/pages/" target="_blank" rel="noopener noreferrer"><code>src/pages/</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>:
The pages represent concrete pages of the website, such as the
<a href="https://umcconnell.github.io/about/">About page</a> or the <a href="https://umcconnell.github.io/projects/">Projects page</a>. These are written
with Nunjucks, but already include front matter for 11ty.</p>
</li>
</ul>
<h2 id="11ty" tabindex="-1">11ty<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#11ty" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>Most of the 11ty-related configuration is placed in the
<a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/.eleventy.js" target="_blank" rel="noopener noreferrer"><code>.eleventy.js</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a> file.</p>
<p>Note, that if you are serving this website from a subproject on Github pages,
i.e. when you are not using <code>GH_USERNAME.github.io</code>, but rather
<code>GH_USERNAME.github.io/PROJECT/</code>, you must change the 11ty <code>pathPrefix</code> field in
the configuration file. The setting is commented out in this website’s
configuration.</p>
<p>In development mode (<code>npm run dev</code>), Markdown posts and images in the
<code>src/posts/drafts/</code> folder will also be built and served. They do, however, not
appear in production mode and are not tracked by git.</p>
<h3 id="icons" tabindex="-1">Icons<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#icons" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>All icons placed in the
<a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/src/assets/icons/" target="_blank" rel="noopener noreferrer"><code>src/assets/icons/</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a> folder will be
grouped into an SVG sprite to improve loading time. The icons can then be used
via the <code>icon</code> <a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#shortcodes">shortcode</a>.</p>
<h3 id="plugins-1" tabindex="-1">Plugins<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#plugins-1" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>The 11ty plugins used in this blog are:</p>
<ul>
<li><a href="https://www.npmjs.com/package/@11ty/eleventy-plugin-rss" target="_blank" rel="noopener noreferrer">@11ty/eleventy-plugin-rss<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a></li>
<li><a href="https://www.npmjs.com/package/@11ty/eleventy-plugin-syntaxhighlight" target="_blank" rel="noopener noreferrer">@11ty/eleventy-plugin-syntaxhighlight<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a></li>
<li><a href="https://www.npmjs.com/package/@11ty/eleventy-navigation" target="_blank" rel="noopener noreferrer">@11ty/eleventy-navigation<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a></li>
</ul>
<p>You can find the full list of available plugins in the
<a href="https://www.11ty.dev/docs/plugins/" target="_blank" rel="noopener noreferrer">11ty docs<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a></p>
<h2 id="webpack-babel" tabindex="-1">Webpack &amp; Babel<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#webpack-babel" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>All JavaScript code referenced in
<a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/src/assets/scripts/main.js" target="_blank" rel="noopener noreferrer"><code>src/assets/scripts/main.js</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>
is transpiled to backwards compatible JavaScript using
<a href="https://babeljs.io/" target="_blank" rel="noopener noreferrer">babel<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a> to support older browsers.</p>
<p>The code files are then bundled using <a href="https://webpack.js.org/" target="_blank" rel="noopener noreferrer">webpack<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>, with
the webpack configuration file located at
<a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/src/assets/scripts/scripts.11ty.js" target="_blank" rel="noopener noreferrer"><code>src/assets/scripts/scripts.11ty.js</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>.
The bundling process uses an in-memory file system to bundle the scripts in
memory and return the bundled result as a reusable JS string.</p>
<h2 id="github" tabindex="-1">Github<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#github" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>The site is automatically built and linted using the provided Github Actions
workflows. The workflow files are located in the
<a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/.github/workflows/" target="_blank" rel="noopener noreferrer"><code>.github/workflows/</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a> folder.</p>
<p>The lint action uses Prettier to check the code for styling and formatting
issues. See the <a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#vscode">VSCode</a> section for information on the Prettier
extension to automatically format your code when you save.</p>
<h2 id="vscode" tabindex="-1">VSCode<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/#vscode" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>For VSCode users, I recommend installing the
<a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noopener noreferrer">Prettier extension<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>
to automatically format your code and posts on save. All recommended
plugins are listed in the <a href="https://github.com/umcconnell/umcconnell.github.io/tree/main/.vscode/" target="_blank" rel="noopener noreferrer"><code>.vscode/</code><svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a> folder.
These recommendations should be automatically suggested when first opening the
project in the editor.</p>
<p>That was it. Thanks for reading!</p>

            ]]></content>
        </entry>
        <entry>
            <title>Meta Blog: Basics</title>
            <link href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/"/>
            <updated>2021-03-30T00:00:00Z</updated>
            <id>https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/</id>
            <content type="html"><![CDATA[
                <p>In my <a href="https://umcconnell.github.io/posts/2021-03-11-hello-internet/">Hello Internet</a> post I announced my
intention to write a post on how I set up this blog and how you can do the same.
The time has now finally come, and the original idea has morphed into a two-part
series. Enjoy!</p>
<div class="msg msg--info">
        <div class="msg__header">INFO</div>
<p>This tutorial is primarily meant for beginners. It explains cloning this blog
from Github, personalizing it with custom icons, name and color, and finally
publishing it with Github pages. <a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/">Part 2</a>
goes further into the technical details of the blog.</p>
<p>If you prefer getting started right away, feel free to skip to the
<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#getting-started">Getting started</a> section. Also, there is a
<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#video-tutorial">video tutorial</a> available for a visual guide on the setup
process.</p>
</div>
<h2 id="static-site" tabindex="-1">Static Site<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#static-site" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>Before we dive into building a static website, it is helpful to quickly look at
what a static website actually is.</p>
<p>On <a href="https://en.wikipedia.org/wiki/Static_web_page" target="_blank" rel="noopener noreferrer">Wikipedia<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>, a static website
is defined as “[…] a web page that is delivered to the user’s web browser
exactly as stored, in contrast to dynamic web pages […]”. Concretely, this
means no dynamic pages, no fancy PHP scripts and no on-page user login. Only
plain good ol’ HTML, with some additional CSS and JavaScript Why would one want
such a boring thing?</p>
<p>Well, it turns out there’re quite a lot of advantages to static sites, if all
you have is static content. Static sites are…</p>
<ul>
<li><strong>faster</strong>: only HTML, CSS, JS and images are served</li>
<li><strong>safer</strong>: no login systems, etc. means a minimal attack surface</li>
<li><strong>more accessible</strong>: an old browser and a slow internet connection is fine</li>
<li><strong>cheaper</strong>: free hosting available, e.g. with Github Pages or Netlify</li>
</ul>
<p>… than their dynamic counterparts.</p>
<p>A static site doesn’t necessarily mean being limited in functionality, or having
a site consisting of only text and images. There are <em>a lot</em> of possibilities on
the front-end, ranging from embedded YouTube videos and RSS feeds to a
comment system (more on this later on and in Part 2).</p>
<h2 id="ssgs" tabindex="-1">SSGs<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#ssgs" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>When creating your static blog, it can be helpful to use a Static Site Generator
(<em>SSG</em>). An SSG helps to make the development and editing process comfortable.
Instead of writing your posts in plain HTML, you can write them in Markdown and
have the SSG convert your posts to HTML files.</p>
<p>This is a similar idea to the concept of compiling code from a higher level
language (such as C or Rust) to machine code, allowing you to write fast code
in a simpler and human-readable form. The process of “compiling” your website
will be referred to as <em>building</em> in the following.</p>
<p>In this guide we’ll be talking about setting up and configuring an SSG called
<a href="https://www.11ty.dev/" target="_blank" rel="noopener noreferrer">11ty<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a> (pronounced <em>eleventy</em>). 11ty runs on top of
<a href="https://nodejs.org/" target="_blank" rel="noopener noreferrer">Node<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>, which allows you to benefit from the massive
JavaScript ecosystem and write your own plugins in JavaScript.</p>
<h2 id="getting-started" tabindex="-1">Getting started<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#getting-started" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><h3 id="prerequisites" tabindex="-1">Prerequisites<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#prerequisites" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>Before we get started with the setup, make sure you have the following
prerequisites:</p>
<ul>
<li><strong>git</strong>: You can find installation instructions for all platforms
<a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" target="_blank" rel="noopener noreferrer">here<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a></li>
<li><strong>github</strong>: You can create an account <a href="https://github.com/join" target="_blank" rel="noopener noreferrer">here<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a></li>
<li><strong>node</strong>: You can download node from <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener noreferrer">here<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a></li>
</ul>
<h3 id="cloning" tabindex="-1">Cloning<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#cloning" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>Start by cloning my blog from the Github repository. In a terminal, run:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/umcconnell/umcconnell.github.io.git blog<br /><span class="token builtin class-name">cd</span> blog/</code></pre>
<p>This will clone the code into the folder <code>blog/</code>.</p>
<h3 id="installing" tabindex="-1">Installing<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#installing" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>In the blog root folder, install the required dependencies using npm:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span></code></pre>
<p>The installation might take a minute or two.</p>
<h3 id="running" tabindex="-1">Running<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#running" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>Once the installation has finished, you are ready to run the build process and
serve the blog on your localhost. Run:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> run dev</code></pre>
<p>You should be able to navigate to <a href="http://localhost:8080/" target="_blank" rel="noopener noreferrer">localhost:8080<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a> and
see the blog as it appears here.</p>
<h2 id="personalizing" tabindex="-1">Personalizing<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#personalizing" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>Now the blog is ready for customization. To do that, you will need to change
four files:</p>
<ul>
<li><a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#packagejson"><code>package.json</code></a></li>
<li><a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#license"><code>LICENSE</code></a></li>
<li><a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#srcsitewebmanifest"><code>src/site.webmanifest</code></a></li>
<li><a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#srcdatametajson"><code>src/data/meta.json</code></a></li>
</ul>
<h3 id="packagejson" tabindex="-1">package.json<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#packagejson" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>The <code>package.json</code> file describes your node project. It mainly contains
information about the project’s source code and package dependencies.</p>
<p>You can add your name to the <code>author</code> field and change the <code>description</code> field
to your liking.</p>
<p>The <code>name</code> and <code>repository.url</code> fields should contain your project name and
source code repository. The project name should be <code>GH_USERNAME.github.io</code>, the
repository url <code>http://github.com/GH_USERNAME/GH_USERNAME.github.io</code>
accordingly. Replace <code>GH_USERNAME</code> with your Github username.</p>
<h3 id="license" tabindex="-1">LICENSE<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#license" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>Modify the <code>LICENSE</code> file to mention your name as the Copyright owner in the
first line.</p>
<h3 id="srcsitewebmanifest" tabindex="-1">src/site.webmanifest<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#srcsitewebmanifest" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>The <code>src/site.webmanifest</code> file describes the web app behavior of your blog.
This controls how the website will be presented when a user adds the blog to
their home screen, i.e. installing the web app.</p>
<p>Here, you can change the <code>name</code> and <code>short_name</code> field.</p>
<h3 id="srcdatametajson" tabindex="-1">src/data/meta.json<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#srcdatametajson" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>Finally, the last file to personalize is <code>src/data/meta.json</code>. This file
contains important meta-information about the blog, such as the author, the
source and comment repositories for the blog, etc.</p>
<p>Make sure to change the <code>title</code> and <code>author</code> fields, which will for example
change the footer or the about page of the blog.</p>
<p>The <code>url</code> should contain the final URL of the website, i.e.
<code>GH_USERNAME.github.io</code>, where <code>GH_USERNAME</code> is your Github username.</p>
<div class="msg msg--info">
        <div class="msg__header">Custom domain</div>
<p>If you do not want to use a custom domain name for your website, such as
<code>example.com</code>, set the <code>custom_domain</code> field to <code>false</code>.</p>
<p>If you own a domain and want to set it up for your blog, you can specify your
custom domain in this field. This then generates a CNAME file in the build
output for you to configure with Github pages. See
<a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site" target="_blank" rel="noopener noreferrer">this article<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>
in the Github docs on for instructions on how to set up a custom domain for your
site.</p>
</div>
<p>Most importantly however, change the fields in the <code>code</code> section of the
webmanifest:</p>
<ul>
<li>
<p>The <code>repo</code> entry should point to the Github repository of the
website (<code>https://github.com/GH_USERNAME/GH_USERNAME.github.io</code>).</p>
</li>
<li>
<p>The <code>comments</code> field points to the repository that will save user comments
from the blog. This should be <code>GH_USERNAME/comments</code>. We’ll create this repo
later.</p>
</li>
</ul>
<p>Once you’ve saved the files, you should be able to see your name appear on the
blog.</p>
<h3 id="icons" tabindex="-1">Icons<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#icons" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>To change the icons that appear in the header, when installing the web app,
etc., navigate to <code>src/assets/images/</code>.</p>
<p>The avatar, displayed in the header of the website, can be changed by replacing
the <code>avatar.png</code> file with your own image. You may also change the <code>email.png</code>
image, which is displayed in the about page as your contact information.</p>
<p>The icons used for the web app are located in the <code>favicon/</code> subfolder. When
replacing these icons with your own, custom icons, make sure to keep the naming
and size of the individual files.</p>
<h3 id="colors" tabindex="-1">Colors<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#colors" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>If you want, you can further personalize the blog with custom colors, styles,
and more. All styles and related configurations are located in the
<code>src/assets/styles/</code> folder. Stylesheets are written in
<a href="https://sass-lang.com/" target="_blank" rel="noopener noreferrer">SCSS<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>. Note that all valid CSS is valid SCSS, which
means you can style the blog in plain CSS if that is more familiar to you.</p>
<p>More specifically, the colors used throughout the web page can be changed in the
<code>utils/_variables.scss</code> file. The main theme color is defined by the
<code>$brand-color-primary</code> variable.These variables are used in all the other
styles, which means it should be enough to change the colors in this file.</p>
<h3 id="comments" tabindex="-1">Comments<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#comments" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>The last thing to do personalize your new blog is to activate the comments
functionality. The blog uses a free service called
<a href="https://utteranc.es/" target="_blank" rel="noopener noreferrer">utterances<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>, which takes care of managing your comments.
It will display a widget at the bottom of your blog post, that lets users leave
a comment. Note that the comments widget is not displayed when you are in
development mode and serving your blog on localhost (<code>npm run dev</code>). It will
appear in the online version.</p>
<p>The comments are stored in a Github repository, which means you don’t need to
worry about storing your comments. To be able to store comments in a Github
repository on your behalf, you will need to install the the
<a href="https://github.com/apps/utterances" target="_blank" rel="noopener noreferrer">utterances Github app<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>. Follow the link and
click the install button. You will need to grant the app access to your
repositories. You can later restrict access to the comments repo only in your
<a href="https://github.com/settings/installations" target="_blank" rel="noopener noreferrer">settings<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>.</p>
<h2 id="first-post" tabindex="-1">First post<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#first-post" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>Your new blog should probably contain a introductory post. All posts are written
in Markdown and located in <code>src/posts/</code>.</p>
<p>Go ahead and delete the posts already in the folder (all files ending with
<code>.md</code>). Next, create a file called <code>YYYY-MM-DD-hello-world.md</code>, where <code>YYYY</code>,
<code>MM</code> and <code>DD</code> refers to the current date (e.g. 2021-03-14).</p>
<p>You place the following text into the file and modify it to your liking.
Changes you make to the file should be reflected instantaneously in your web
browser.</p>
<pre class="language-md"><code class="language-md"><span class="token front-matter-block"><span class="token punctuation">---</span><br /><span class="token front-matter yaml language-yaml">title: Hello World<br />date: 2021-03-14<br />description: ><br />    Hello World introductory post.<br />tags:<br />    - hello<br />    - world<br />    - intro</span><br /><span class="token punctuation">---</span></span><br /><br />Hi everyone!<br /><br />This is my <span class="token italic"><span class="token punctuation">_</span><span class="token content">brand new</span><span class="token punctuation">_</span></span> blog. <span class="token bold"><span class="token punctuation">**</span><span class="token content">Enjoy</span><span class="token punctuation">**</span></span>!</code></pre>
<p>That’s it! You’re blog is ready to go online.</p>
<h2 id="publishing" tabindex="-1">Publishing<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#publishing" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>After customizing the blog, we are now ready to publish our blog. We will
publish the blog on <a href="https://pages.github.com/" target="_blank" rel="noopener noreferrer">Github pages<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>. After following
these steps, your page will be available at <code>https://GH_USERNAME.github.io</code>.</p>
<h3 id="committing" tabindex="-1">Committing<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#committing" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>Start by committing all your customization changes to git. In the root folder
of the blog, run:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><br /><span class="token function">git</span> commit -av</code></pre>
<h3 id="creating-repositories" tabindex="-1">Creating Repositories<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#creating-repositories" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>Next, we’ll create the Git repositories that will hold the source code of your
blog and the comments to your posts.</p>
<p>In your web browser, navigate to <a href="https://github.com/new" target="_blank" rel="noopener noreferrer">github.com/new<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a> to
create a new repository.</p>
<p>For the comments repo, enter <code>comments</code> as the repository name. Make sure, the
repo visibility is set to “Public”, before hitting the “Create repository”
button.</p>
<p>Repeat this step for the repo that is going to hold the blog’s source code.
Enter <code>GH_USERNAME.github.io</code> as repo name (where <code>GH_USERNAME</code> is your Github
username) and select the visibility “Public”. Then, create the repository.</p>
<p>You should see a set of instructions to publish your code. Note the instructions
to “push an existing repository from the command line”. When executing these
instructions in the root folder of your blog, you will need to change one
command. Because you have cloned the original blog code from Github, it already
has a remote git origin set. You will need to use <code>set-url</code> instead of <code>add</code>
here:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">git</span> remote set-url origin https://github.com/GH_USERNAME/GH_USERNAME.github.io.git<br /><span class="token function">git</span> branch -M main<br /><span class="token function">git</span> push -u origin main</code></pre>
<h3 id="github-pages" tabindex="-1">Github Pages<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#github-pages" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><p>The last step is to publish your pages using Github pages. In your repository
containing the blog source, navigate to the “Settings” tab. Almost at the
bottom of the page, you should find a “Github pages section”.</p>
<p><img src="https://umcconnell.github.io/assets/images/posts/meta-blog/github-pages-publish.png" alt="Github Pages section in the repository settings" /></p>
<p>From the source drop-down, select the “gh-pages” branch. After hitting the save
button, your site should be available online.</p>
<h2 id="video-tutorial" tabindex="-1">Video tutorial<a href="https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/#video-tutorial" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>My friend Boldizsar Zopcsak and I recorded a video tutorial about this whole
procedure a little while ago. The video goes through the basics of cloning,
personalizing and publishing your next blog. Feel free to have a look:</p>
<iframe class="video yt-video" width="560" height="315" src="https://www.youtube-nocookie.com/embed/wVjtl6qb_II" srcdoc="<style>               * {                   padding: 0;                   margin: 0;                   overflow: hidden;               }                html,body {                   height: 100%;               }                              img,span {                   position: absolute;                   width: 100%;                   top: 0;                   bottom: 0;                   margin: auto;               }                              span {                   display: flex;                   background-color: rgba(51, 51, 51, 40%);                   align-items: center;                   justify-content: center;                   font: 48px/1.5 sans-serif;                   color: white;                   text-shadow: 0 0 1em black;               }           </style>           <a href='https://www.youtube-nocookie.com/embed/wVjtl6qb_II?autoplay=1'>               <img src='https://img.youtube.com/vi/wVjtl6qb_II/hqdefault.jpg' alt='Embedded Youtube Video. Click to play.'><span>▶</span>           </a>" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" title="Embedded Youtube Video. Click to play." loading="lazy"></iframe>
<p>For a look at the technical details of this blog, head over to
<a href="https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/">Part 2</a> of this series.</p>

            ]]></content>
        </entry>
        <entry>
            <title>Fibonacci in Rust</title>
            <link href="https://umcconnell.github.io/posts/2021-03-13-fibonacci-rust/"/>
            <updated>2021-03-13T00:00:00Z</updated>
            <id>https://umcconnell.github.io/posts/2021-03-13-fibonacci-rust/</id>
            <content type="html"><![CDATA[
                <p>You’ve probably already heard of the Fibonacci sequence. It is a sequence of
numbers named after the mathematician
<a href="https://en.wikipedia.org/wiki/Fibonacci" target="_blank" rel="noopener noreferrer">Leonardo of Pisa<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>, that’s generated
using a simple rule, yet pops up in many unexpected places in math and nature,
often in relation to the golden ratio.</p>
<p>To generate the sequence, start with the sequence <code>1, 1</code>. Then, generate the
next element in the sequence by adding up the last two elements:</p>
<ul>
<li><code>1, 1</code></li>
<li><code>1, 1, 2</code></li>
<li><code>1, 1, 2, 3</code></li>
<li>…</li>
</ul>
<p>Mathematically, this can elegantly be expressed using recursion. In this
formula, <em>n</em> represents a given position in the sequence starting with <em>0</em>.</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>n</mi><mo>≤</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">fib(n) = \begin{cases}
    1 &amp;\text{if } n \leq 1 \\
    fib(n-2)+fib(n-1) &amp;\text{if } n \gt 1
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">i</span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">i</span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">i</span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<h2 id="implementation" tabindex="-1">Implementation<a href="https://umcconnell.github.io/posts/2021-03-13-fibonacci-rust/#implementation" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>We will be implementing the Fibonacci logic using Rust. Rust is a programming
language initially developed at Mozilla that can guarantee memory safety, while
at the same time being super fast. We’ll try out different approaches and see
which one runs fastest.</p>
<p>If you want to follow along on your computer, you can find simple installation
instructions for Rust and cargo, the Rust package manager, for just about any
OS, on the Rust homepage:
<a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener noreferrer">https://www.rust-lang.org/tools/install<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>.</p>
<p>Alternatively, you can also code along online on the
<a href="https://play.rust-lang.org/" target="_blank" rel="noopener noreferrer">Rust playground<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a> without having to install
anything!</p>
<h3 id="setup" tabindex="-1">Setup<a href="https://umcconnell.github.io/posts/2021-03-13-fibonacci-rust/#setup" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h3><div class="msg msg--info">
<p>If you are not coding along on your machine, feel free to skip this section.</p>
</div>
<p>First, let’s create a new Rust library project from the command-line using
cargo:</p>
<pre class="language-bash"><code class="language-bash">cargo new --lib rust_fibonacci<br /><span class="token builtin class-name">cd</span> rust_fibonacci/</code></pre>
<p>The file <code>src/lib.rs</code> is where we’ll be writing source code later on. You can
delete it’s pregenerated contents for now, as we won’t go through writing tests
for such a simple program.</p>
<p>Now, the only aspect missing is the benchmarking, so that we can compare the
different approaches to calculating the Fibonacci sequence. To do this, we can
use the <a href="https://docs.rs/crate/criterion/0.3.3" target="_blank" rel="noopener noreferrer">criterion crate<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>, which allows
us to write benchmarks and run them using cargo. Add the following code to the
<code>Cargo.toml</code> file, just below the <code>[dependencies]</code> section at the bottom:</p>
<pre class="language-toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dev-dependencies</span><span class="token punctuation">]</span><br /><span class="token key property">criterion</span> <span class="token punctuation">=</span> <span class="token string">"0.3"</span><br /><br /><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">bench</span><span class="token punctuation">]</span><span class="token punctuation">]</span><br /><span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">"fibonacci_benchmark"</span><br /><span class="token key property">harness</span> <span class="token punctuation">=</span> <span class="token boolean">false</span></code></pre>
<p>Create a directory called <code>benches</code> in the base directory and place an empty file
called <code>fibonacci_benchmark.rs</code> into it.</p>
<p>Once you’re done, the <code>rust_fibonacci/</code> project directory content should look
something like this:</p>
<pre><code>.
├── benches
│   └── fibonacci_benchmark.rs
├── Cargo.lock
├── Cargo.toml
└── src
    └── lib.rs
</code></pre>
<h2 id="1-standard" tabindex="-1">#1: Standard<a href="https://umcconnell.github.io/posts/2021-03-13-fibonacci-rust/#1-standard" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><div class="msg msg--info">
        <div class="msg__header">INFO</div>
If you're using the Rust playground, just add all the code examples above the
`main` function. The playground just allows you to use one single file to write
your code in.
</div>
<p>Now, let’s get coding! Probably the most straightforward way to implement the
Fibonacci sequence, would be to just start with two variables <code>a</code> and <code>b</code>, that
keep track of the last two elements of the sequence and build from there. Let’s
do that! Add this code to <code>src/lib.rs</code>:</p>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">fib_standard</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">usize</span> <span class="token punctuation">{</span><br />    <span class="token keyword">let</span> <span class="token keyword">mut</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><br />    <span class="token keyword">let</span> <span class="token keyword">mut</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><br /><br />    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span>n <span class="token punctuation">{</span><br />        <span class="token keyword">let</span> old <span class="token operator">=</span> a<span class="token punctuation">;</span><br />        a <span class="token operator">=</span> b<span class="token punctuation">;</span><br />        b <span class="token operator">+=</span> old<span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br /><br />    b<br /><span class="token punctuation">}</span></code></pre>
<p>Notice the <code>pub</code> keyword: We use it, so that we can import the code from other
files. This will be useful when benchmarking the functions later on.</p>
<p>Here, we declare <code>a</code> and <code>b</code> as <code>mut</code>, i.e. <em>mutable</em>, to allow us to mutate
or change their values. In Rust, all variables are <em>imutable</em> by default.</p>
<p>We start our loop at <code>1</code>, because the first two values are already defined and
the range is non-inclusive for its end.</p>
<h2 id="2-recursion" tabindex="-1">#2: Recursion<a href="https://umcconnell.github.io/posts/2021-03-13-fibonacci-rust/#2-recursion" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>Another approach to implementing the Fibonacci algorithm would be to just
translate the recursive mathematical definition from the introduction into Rust
code. Add the following function in <code>src/lib.rs</code>:</p>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">fib_recursive</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">usize</span> <span class="token punctuation">{</span><br />    <span class="token keyword">match</span> n <span class="token punctuation">{</span><br />        <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">,</span><br />        _ <span class="token operator">=></span> <span class="token function">fib_recursive</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib_recursive</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>In this case, the match operator comes in really handy. It works just like the
conditional function definition in math! It is short, clean and concise. This
means we don’t have to write endless <code>if { ... } else if { ... } else { ... }</code>
clauses.</p>
<p>One last thing to note, is the implicit return. We did not have to use the
<code>return</code> statement, because the last expression is automatically returned.
However, it is important not to end with a semi-colon, which would make the
function return nothing (or <code>()</code>, to be more precise).</p>
<p>When we take a close look at this function, it might become clear that it is
pretty inefficient. When calculating <code>fib_recursive(n)</code>, we end up calculating
the Fibonacci sequence twice every step down from <code>n</code>, although
it would be enough to calculate the sequence once. This is where
<a href="https://en.wikipedia.org/wiki/Memoization" target="_blank" rel="noopener noreferrer">memoization<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a> comes in.</p>
<div class="msg msg--info">
        <div class="msg__header">Runtime complexity</div>
<p>The recursive approach has the runtime complexity <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>.</p>
<p>This is because the time complexity of <code>fib_recursive(n)</code>
<em>approximately doubles</em> for every <code>n</code>, because it computes <code>fib_recursive(n-1)</code>
and <code>fib_recursive(n-2)</code>.</p>
<p>If we want to be more exact about the statement “it approximately doubles”, we
can say the following about this factor <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span></span></span></span>:</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left right left" columnspacing="0em 1em 0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msup><mi>a</mi><mi>n</mi></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>a</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mo lspace="0em" rspace="0em">+</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msup><mi>a</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msup><mspace width="1em"></mspace><mi mathvariant="normal">∣</mi><mo>:</mo><msup><mi>a</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msup><mi>a</mi><mn>2</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>a</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mo lspace="0em" rspace="0em">+</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><mn>1</mn><mo>±</mo><msqrt><mn>5</mn></msqrt></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">
\begin{aligned}
a^n &amp;= a^{(n-1)} &amp;+ &amp;a^{(n-2)} \quad | : a^{(n-2)} \\
a^2 &amp;= a &amp;+ &amp;1 \\
a   &amp;= \frac{1 \pm \sqrt{5}}{2}
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.692328000000001em;vertical-align:-2.596164000000001em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.096164em;"><span style="top:-5.742384em;"><span class="pstrut" style="height:3.58422em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span><span style="top:-4.218276em;"><span class="pstrut" style="height:3.58422em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.9740559999999996em;"><span class="pstrut" style="height:3.58422em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.596164000000001em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.096164em;"><span style="top:-5.742384em;"><span class="pstrut" style="height:3.58422em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span><span style="top:-4.218276em;"><span class="pstrut" style="height:3.58422em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span></span></span><span style="top:-1.9740559999999996em;"><span class="pstrut" style="height:3.58422em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5842200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.596164000000001em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.096164em;"><span style="top:-5.158164em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span></span></span><span style="top:-3.634056em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.025943999999999967em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.096164em;"><span style="top:-5.158164em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.634056em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.025943999999999967em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>We can safely ignore the second solution <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mn>1</mn><mo>−</mo><msqrt><mn>5</mn></msqrt></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1 - \sqrt{5}}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3829999999999998em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0379999999999998em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.3990085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>, which is
negative. This leaves us with <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mfrac><mrow><mn>1</mn><mo>+</mo><msqrt><mn>5</mn></msqrt></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">a = \frac{1 + \sqrt{5}}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3829999999999998em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0379999999999998em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.3990085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>, the
<a href="https://en.wikipedia.org/wiki/Golden_ratio" target="_blank" rel="noopener noreferrer">golden ratio<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>. What a coincidence!
The asymptotically tight bound on the running time of <code>fib_recursive</code> is thus
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>a</mi><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Theta(a^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, where <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span></span></span></span> is the golden ratio.</p>
<p>You can find out more about asymptotic notation in computer science on
<a href="https://www.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation" target="_blank" rel="noopener noreferrer">Khan Academy<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>.</p>
</div>
<h2 id="3-memoization" tabindex="-1">#3: Memoization<a href="https://umcconnell.github.io/posts/2021-03-13-fibonacci-rust/#3-memoization" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>We will use a
<a href="https://doc.rust-lang.org/std/collections/struct.HashMap.html" target="_blank" rel="noopener noreferrer">std::collections::HashMap<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>,
which is similar to a <code>dict</code> in Python or an <code>Object</code> in JavaScript,
to keep track of all the values we’ve already calculated. Then, we can quickly
check, whether a given value has already been encountered and can return this,
before wasting time on a redundant calculation. Add this code to your <code>lib.rs</code>
file:</p>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><br /><br /><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">fib_memoization</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> memo<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token punctuation">,</span> <span class="token keyword">usize</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">usize</span> <span class="token punctuation">{</span><br />    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span> memo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token keyword">return</span> <span class="token operator">*</span>v<span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br /><br />    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token keyword">match</span> n <span class="token punctuation">{</span><br />        <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">,</span><br />        _ <span class="token operator">=></span> <span class="token function">fib_memoization</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> memo<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib_memoization</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> memo<span class="token punctuation">)</span><span class="token punctuation">,</span><br />    <span class="token punctuation">}</span><span class="token punctuation">;</span><br /><br />    memo<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><br />    v<br /><span class="token punctuation">}</span></code></pre>
<p>We first check, whether the current <em>n</em> is in the HashMap, by checking whether
the value at <em>n</em> is <code>Some</code>. If no value has jet been recorded, <code>memo.get(&amp;n)</code>
will return <code>None</code> and the pattern won’t match.</p>
<p>Next, we compute the sequence value just as when using plain recursion. The only
difference is, that we save the value to our memo before returning it.</p>
<p>Notice how we write <code>&amp;mut HashMap&lt;usize, usize&gt;</code> in the function definition.
This is part of Rust’s borrow checker, that ensure memory safety for our
program. By declaring the memo as <em>mutable</em>, Rust ensures that only one part of
the program has write access at a time and that no other part of the program can
read from the memo while we have write access to it and might be modifying it
unexpectedly.</p>
<h2 id="4-iterator" tabindex="-1">#4: Iterator<a href="https://umcconnell.github.io/posts/2021-03-13-fibonacci-rust/#4-iterator" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>One last way to implement the Fibonacci sequence that this post will cover is
using Rust iterators. You might be familiar with this concept, especially if
you’ve already used
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator" target="_blank" rel="noopener noreferrer">Generators in JavaScript<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>
or <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" target="_blank" rel="noopener noreferrer">Iterators in Python<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a>.</p>
<p>Rust iterators implement the
<a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html" target="_blank" rel="noopener noreferrer"><code>Iterator</code> trait<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a> and
expose a <code>next</code> function, which returns the next element of the iterator or
<code>None</code>, if the iteration is over.</p>
<p>Lets implement this iterator principle using a <code>struct</code>. The struct will save
the last two elements <code>a</code> and <code>b</code> of the sequence, starting at <code>1</code>. It will
then generate the next value just as in the standard approach:</p>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">FibIterator</span> <span class="token punctuation">{</span><br />    a<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span><br />    b<span class="token punctuation">:</span> <span class="token keyword">usize</span><br /><span class="token punctuation">}</span><br /><br /><span class="token keyword">impl</span> <span class="token class-name">Default</span> <span class="token keyword">for</span> <span class="token class-name">FibIterator</span> <span class="token punctuation">{</span><br />    <span class="token keyword">fn</span> <span class="token function-definition function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">{</span><br />        <span class="token class-name">FibIterator</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span><br /><br /><span class="token keyword">impl</span> <span class="token class-name">Iterator</span> <span class="token keyword">for</span> <span class="token class-name">FibIterator</span> <span class="token punctuation">{</span><br />    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token keyword">usize</span><span class="token punctuation">;</span><br /><br />    <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">></span> <span class="token punctuation">{</span><br />        <span class="token keyword">let</span> curr <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span><br />        <span class="token keyword">self</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span><br />        <span class="token keyword">self</span><span class="token punctuation">.</span>b <span class="token operator">=</span> curr <span class="token operator">+</span> <span class="token keyword">self</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span><br /><br />        <span class="token class-name">Some</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>A few things to notice here. First, notice how we all methods of the struct are
wrapped in <code>impl</code> blocks. This separates the struct definition from it’s
methods, helping your code stay clean.</p>
<p>Also, we write a default method that takes no arguments and returns an
initialized <code>FibIterator</code>. As this method is not associated to a struct
instance, i.e. an initialized <code>FibIterator</code> with concrete values for <code>a</code> and
<code>b</code>, it is called an <em>associated function</em>. We can call these types of functions
using <code>::</code>. In this case, we would call <code>FibIterator::default()</code> to construct a
new instance.</p>
<p>The <code>Iterator</code> and <code>Default</code> traits are implemented using the <code>impl Foo for Bar</code>
statement. In the <code>impl</code> block of the <code>Iterator</code> trait, we define a next
function that just returns the sum of the two last elements in the sequence.
This way, the iterator can just keep generating new integers of the sequence
<strong>on demand</strong>. Because iterators in Rust are lazy, these integers are only
generated when needed.</p>
<div class="msg msg--info">
        <div class="msg__header">INFO</div>
<p>A trait is a set of common functions all structs must implement, to have this
trait. In the case of <code>Iterator</code>, this is solely the <code>next</code> function.</p>
<p>Traits are useful, because they allow other functions to accept different types,
while making sure that all of these different types share a common interface.</p>
<p>When implementing <code>Iterator</code>, this trait unlocks a whole set of other useful
methods such as <code>skip</code>, <code>take</code>, <code>filter</code>, and many more, that all rely on the
<code>next</code> method we implemented. These all come built-in with the trait and we
don’t need any additional work to implement these.</p>
<p>Iterators are an important part of Rust, as they allow to write code in a
concise functional style, while incurring no additional performance. When
compiling the code, Rust will optimize the operations away and turn the
iterators into classical for loops in the background. That means you don’t have
to choose between writing fast and clean code, you can do both!</p>
</div>
<h2 id="bechmarking" tabindex="-1">Bechmarking<a href="https://umcconnell.github.io/posts/2021-03-13-fibonacci-rust/#bechmarking" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>Finally, we will compare the different approaches by benchmarking the different
functions. Add the following code to the <code>benches/fibonacci_benchmark.rs</code> file.
Note that benchmarking does not seem possible on the online Rust playground.</p>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">criterion<span class="token punctuation">::</span></span><span class="token punctuation">{</span>criterion_group<span class="token punctuation">,</span> criterion_main<span class="token punctuation">,</span> <span class="token class-name">BenchmarkId</span><span class="token punctuation">,</span> <span class="token class-name">Criterion</span><span class="token punctuation">}</span><span class="token punctuation">;</span><br /><span class="token keyword">use</span> <span class="token namespace">rust_fibonacci<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><br /><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><br /><br /><span class="token keyword">fn</span> <span class="token function-definition function">bench_fibs</span><span class="token punctuation">(</span>c<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Criterion</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    <span class="token keyword">let</span> <span class="token keyword">mut</span> group <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">benchmark_group</span><span class="token punctuation">(</span><span class="token string">"Fibonacci"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><br />    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        group<span class="token punctuation">.</span><span class="token function">bench_with_input</span><span class="token punctuation">(</span><span class="token class-name">BenchmarkId</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Standard"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>b<span class="token punctuation">,</span> i<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span><br />            b<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token function">fib_standard</span><span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><br />        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><br />        group<span class="token punctuation">.</span><span class="token function">bench_with_input</span><span class="token punctuation">(</span><span class="token class-name">BenchmarkId</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Recursion"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>b<span class="token punctuation">,</span> i<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span><br />            b<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token function">fib_recursive</span><span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><br />        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><br />        group<span class="token punctuation">.</span><span class="token function">bench_with_input</span><span class="token punctuation">(</span><span class="token class-name">BenchmarkId</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Memoization"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>b<span class="token punctuation">,</span> i<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span><br />            b<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span><br />                <span class="token keyword">let</span> <span class="token keyword">mut</span> memo <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />                <span class="token function">fib_memoization</span><span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> memo<span class="token punctuation">)</span><span class="token punctuation">;</span><br />            <span class="token punctuation">}</span><span class="token punctuation">)</span><br />        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><br />        group<span class="token punctuation">.</span><span class="token function">bench_with_input</span><span class="token punctuation">(</span><span class="token class-name">BenchmarkId</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Iterator"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>b<span class="token punctuation">,</span> i<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span><br />            b<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span><br />                <span class="token class-name">FibIterator</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nth</span><span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />            <span class="token punctuation">}</span><span class="token punctuation">)</span><br />        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br />    group<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span><br /><br /><span class="token macro property">criterion_group!</span><span class="token punctuation">(</span>benches<span class="token punctuation">,</span> bench_fibs<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token macro property">criterion_main!</span><span class="token punctuation">(</span>benches<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>This code creates a test group called <code>Fibonacci</code> and benchmarks the four
different approaches using the same input. Run the benchmark in your terminal:</p>
<pre class="language-bash"><code class="language-bash">cargo bench</code></pre>
<p>Once the benchmarks are done, you can view a nice HTML report in your browser by
opening <code>target/criterion/Fibonacci/report/index.html</code>. Running on my machine
gave me the following stats:</p>
<p><img src="https://umcconnell.github.io/assets/images/posts/fibonacci-rust/perf_plot.svg" alt="Performance plot of the different methods" /></p>
<p>You can clearly see, that the naive recursive solution is the least performant
approach, as its execution time increases (exponentially, but not visible with
2 inputs) with the workload. The memoized version, in contrast, shows a great
improvement, but it still incurs the performance overhead of initializing and
managing the memo, making it less performant than the two last approaches.</p>
<p>The iterator and standard seem to be indistinguishable. On my machine, the
execution of the iterator takes <code>~34ns</code> for both inputs, the standard approach
around <code>~4.5ns</code> for both inputs.</p>
<p>You can find more detailed graphs and charts for every function in the
corresponding <code>target/criterion/Fibonacci/&lt;APPROACH&gt;/report/index.html</code> folder.</p>
<h2 id="conclusion" tabindex="-1">Conclusion<a href="https://umcconnell.github.io/posts/2021-03-13-fibonacci-rust/#conclusion" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>We’ve implemented and benchmarked four different approaches to generating the
Fibonacci sequence.</p>
<p>Although the recursive solution is short and concise, it is by far the least
performant and can become too slow to calculate for larger inputs. The memoized
solution is interesting, in that it combines the conciseness of the recursive
approach with a greater speed. The standard approach, on the other hand, seems
to be the fastest, but it is arguably the least elegant.</p>
<p>Finally, the iterator solution appears to be by far the most versatile while at
the same time being very fast. Additionally, it allows the user to work with the
sequence in a very convenient way, e.g. by filtering, mapping, etc.</p>
<p>Overall, it becomes clear that iterators are a very versatile and performant
aspect of Rust, that are also worth considering in other languages such as
Python or JavaScript.</p>
<p>The final code of this project is open source and available here:
<a href="https://github.com/umcconnell/rust_fibonacci" target="_blank" rel="noopener noreferrer">https://github.com/umcconnell/rust_fibonacci<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a></p>
<p>Feedback, questions, comments or improvements are welcome!</p>
<p>Thanks for reading.</p>

            ]]></content>
        </entry>
        <entry>
            <title>Hello Internet</title>
            <link href="https://umcconnell.github.io/posts/2021-03-11-hello-internet/"/>
            <updated>2021-03-11T00:00:00Z</updated>
            <id>https://umcconnell.github.io/posts/2021-03-11-hello-internet/</id>
            <content type="html"><![CDATA[
                <p>Hi!</p>
<p>This is the first post on my new blog, and I’m really excited. I hope to write
more in the coming weeks and months, especially about technical and
software-related topics. My goal is to write about current software side
projects and things I’ve learned, all in the spirit of
“Stay curious, keep learning”. Depending on how that works out, I’ll adapt if
needed.</p>
<h2 id="outlook" tabindex="-1">Outlook<a href="https://umcconnell.github.io/posts/2021-03-11-hello-internet/#outlook" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>A few topics I’d like to cover soon are AI, Rust and how I set up this blog, to
give some ideas in case you would like to do the same. In the meantime, as this
blog is entirely open source, I invite you to check out the
<a href="https://github.com/umcconnell/umcconnell.github.io" target="_blank" rel="noopener noreferrer">source code<svg class="icon icon--link-external" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link-external"></use>
        </svg></a> on Github,
fork it, make it your own, or whatever you want.</p>
<h2 id="why" tabindex="-1">Why?!?<a href="https://umcconnell.github.io/posts/2021-03-11-hello-internet/#why" class="anchor-link"><svg class="icon icon--link" role="img" aria-hidden="true" width="24" height="24">
        <use xlink:href="#icon-link"></use>
        </svg></a></h2><p>I hope to learn something useful from this experience and gain some more
experience building websites. Writing down ideas and summarizing problems is a
good exercise, all while improving writing skills. A blog also let’s me document
findings and ideas for later use or for someone else to be inspired.</p>
<p>And maybe I can even help solve a problem on the way or motivate to learn
something new!</p>
<p>Feel free to comment on any post, give feedback, suggest improvements, correct
me or whatever else you think is appropriate.</p>
<p>Cheers!</p>
<p>- Ulysse</p>

            ]]></content>
        </entry></feed>