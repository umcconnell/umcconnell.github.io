{
    "index": [
        {
            "title": "Kleitman-Winston Algorithm",
            "url": "/posts/2024-03-19-kleitman-winston/",
            "updated": "2024-03-19T00:00:00Z",
            "description": "Graph containers &amp; bounds on the number of independent sets in a locally dense graph.",
            "content": "Overview We will show that for a locally dense graph we can give a strong upper bound on the number of independent sets of a certain size. This specific method for graphs is an instance of the so-called container method , that allows to give bounds on structures appearing in larger objects with specific local properties. More specifically as applied to graph theory, this turns out to be quite helpful in proving lower bounds in Ramsey theory . The proof presented here follows the one presented in the survey paper by Samotij [1] using methods originally presented in the paper by Winston and Kleitman [2]. Some elementary knowledge of graph theory is helpful, such as the notion of independent sets and induced subgraphs, but I try to be as explicit and clear as possible. I will try to stick to common graph theoretical notation, but for the sake of both readability and completeness an overview of notation is given at the end of the post. Basic bounds Let’s start with some basic bounds on the number of independent sets ∣I(G)∣|&#92;mathcal{I}(G)|∣I(G)∣ in a graph GGG. Recall that an independent set is a set of vertices in which no two are connected by an edge. If α(G)&#92;alpha(G)α(G) refers to the independence number, ie. the size of the largest independent set in GGG, we can certainly say that 2α(G)≤∣I(G)∣ 2^{&#92;alpha(G)} &#92;leq |&#92;mathcal{I}(G)| 2α(G)≤∣I(G)∣ because every subset of the largest independent set is itself an independent set (recall that 2∣N∣2^{|N|}2∣N∣ is the number of different subsets that can be formed from a set NNN). Similarly, we can give an upper bound of ∣I(G)∣≤∑k=0α(G)(∣V(G)∣k) |&#92;mathcal{I}(G)| &#92;leq &#92;sum_{k=0}^{&#92;alpha(G)} &#92;binom{|V(G)|}{k} ∣I(G)∣≤k=0∑α(G)​(k∣V(G)∣​) as every independent set is a subset of size at most α(G)&#92;alpha(G)α(G) over the vertices of GGG. Theorem Statement We will now bound the number of independent sets of a certain size in a locally dense graph by showing that every independent set is part of a small container. These containers are constructed with the Kleitman-Winston algorithm. By counting these countainers, we can estimate the number of independent sets. The tightness property of the containers then allows us to give useful bounds on the number of independent sets. Let us now turn to the actual theorem. For N,R,q∈NN, R, q &#92;in &#92;mathbb{N}N,R,q∈N and β∈R&#92;beta &#92;in &#92;mathbb{R}β∈R with β∈[0,1]&#92;beta &#92;in [0, 1]β∈[0,1], let GGG be a graph on NNN vertices satisfying: N≤Reβq(1)&#92;tag{1} N &#92;leq R e^{&#92;beta q} N≤Reβq(1) In addition, we also require that G must be a β&#92;betaβ-locally dense graph. That is, for every vertex subset A⊆V(G)A &#92;subseteq V(G)A⊆V(G) of size at least RRR we have the following lower bound on the number of edges in the induced subgraph G[A]G[A]G[A]: eG(A)≥β(∣A∣2)(2)&#92;tag{2} e_G(A) &#92;geq &#92;beta &#92;binom{|A|}{2} eG​(A)≥β(2∣A∣​)(2) Note that this corresponds to the situation where the subgraph spanned by AAA over GGG contains at least a β&#92;betaβ-fraction of the edges of the corresponding complete graph over AAA, or in other words, that the average degree of AAA is at least β(∣A∣−1)&#92;beta (|A| - 1)β(∣A∣−1). Theorem Given such a β&#92;betaβ-locally dense graph GGG satisfying (1) and (2), we can construct up to (Nq)&#92;binom{N}{q}(qN​) small containers C1,…,CiC_1, &#92;dots, C_iC1​,…,Ci​ for 1≤i≤(Nq)1 &#92;leq i &#92;leq &#92;binom{N}{q}1≤i≤(qN​) of size at most R+qR + qR+q. Every independent set of size exactly q+kq + kq+k for k≤qk &#92;leq qk≤q belongs to a container CiC_iCi​. For the number of independent sets in GGG of size exactly q+kq + kq+k we obtain: ∣I(G,q+k)∣≤(Nq)(Rk)(3)&#92;tag{3} |&#92;mathcal{I}(G, q + k)| &#92;leq &#92;binom{N}{q} &#92;binom{R}{k} ∣I(G,q+k)∣≤(qN​)(kR​)(3) Algorithm Before describing the algorithm, let us fix a few technicalities. We need the notion of max-degree ordering to ensure high-degree vertices are quickly removed from the graph and the container quickly shrinks. For a vertex set A⊆V(G)A &#92;subseteq V(G)A⊆V(G), the max-degree ordering (v1,…,v∣A∣)(v_1, &#92;dots, v_{|A|})(v1​,…,v∣A∣​) is defined by the degree of vertices over the induced subgraph G[A]G[A]G[A] in descending order, where potential ties are broken by a fixed but arbitrary total order over V(G)V(G)V(G). In this case v1v_1v1​ has the highest degree, etc. The Kleitman-Winston algorithm works by iteratively removing high-degree vertices as outlined above: Kleitman-Winston algorithm .msg--algorithm ul ol { list-style-type: decimal; } Input: Independent set I∈I(G)I &#92;in &#92;mathcal{I}(G)I∈I(G), integer q≤∣I∣q &#92;leq |I|q≤∣I∣ Output: selected vertices SSS, available vertices AAA Procedure: Set available vertices A=V(G)A = V(G)A=V(G), selected vertices S=∅S = &#92;varnothingS=∅ Iterate for i=1,…,qi=1, &#92;dots, qi=1,…,q: Let A=(v1,…,v∣A∣)A = (v_1, &#92;dots, v_{|A|})A=(v1​,…,v∣A∣​) be ordered by max-degree Let tit_iti​ be the first index in the ordering of AAA such that vti∈Iv_{t_i} &#92;in Ivti​​∈I (i.e. first remaining vertex of III by max-degree ordering in induced subgraph G[A]G[A]G[A]). Move vtiv_{t_i}vti​​ from AAA to SSS Remove higher-degree vertices Xi=(v1,…,vti−1)X_i = (v_1, &#92;dots, v_{t_i - 1})Xi​=(v1​,…,vti​−1​) from AAA: A=A∖XiA = A &#92;setminus X_iA=A∖Xi​ Remove vtiv_{t_i}vti​​ and its neighborhood NA(vti)&#92;mathcal{N}_A(v_{t_i})NA​(vti​​) from AAA: A=A∖({vti}∪NA(vti))A = A &#92;setminus (&#92;{ v_{t_i} &#92;} &#92;cup &#92;mathcal{N}_A(v_{t_i}))A=A∖({vti​​}∪NA​(vti​​)) Output SSS and AAA The container of III is given by C:=S∪AC := S &#92;cup AC:=S∪A. Notice that the tightness of the container is apparent in that fact that S⊆I⊆CS &#92;subseteq I &#92;subseteq CS⊆I⊆C. Proof The algorithm maintains a few invariants, that help prove correctness: ∣A∣|A|∣A∣ decreases monotonically as we remove vertices in every iteration, while ∣S∣|S|∣S∣ increases monotonically. Also notice that the previous observation S⊆I⊆(S∪A)S &#92;subseteq I &#92;subseteq (S &#92;cup A)S⊆I⊆(S∪A) holds at every iteration of the algorithm. It is clear that the algorithm always succeeds in constructing the set of selected vertices SSS from q≤∣I∣q &#92;leq |I|q≤∣I∣ vertices of III. This is because the algorithm always selects the next highest degree vertex viv_ivi​ of III occuring in the subgraph G[A]G[A]G[A] at every step, i.e. no vertex vi∈Iv_i &#92;in Ivi​∈I is ever removed from AAA and not added to SSS as a discarded higher-degree vertex. In addition, the vertices of III form an independent set by assumption, and as such a vertex viv_ivi​ is never removed as part of the neighborhood of another selected vertex. Size of A To conclude tightness of the containers, we must show that the final AAA returned from the algorithm is sufficiently small. In fact, we will show that ∣A∣≤R|A| &#92;leq R∣A∣≤R. In the following, we will denote by AiA_iAi​ the set of available vertices at the beginning of the i-th iteration of the algortithm, and by Ai′=Ai∖XiA&amp;#x27;_i = A_i &#92;setminus X_iAi′​=Ai​∖Xi​ the set of available vertices after removing higher-degree vertices but before remoing vti∈Iv_{t_i} &#92;in Ivti​​∈I. First, note that by the Handshaking lemma we obtain an expression for the average degree of vertices: 1∣V∣∑v∈Vdeg(v)=2∣E∣∣V∣(4)&#92;tag{4} &#92;frac{1}{|V|} &#92;sum_{v &#92;in V} deg(v) = &#92;frac{2|E|}{|V|} ∣V∣1​v∈V∑​deg(v)=∣V∣2∣E∣​(4) Suppose for sake of contradiction ∣A∣&amp;gt;R|A| &amp;gt; R∣A∣&amp;gt;R for the final set of available vertices. Then it must be that the vti∈Sv_{t_i} &#92;in Svti​​∈S selected in every iteration must have been selected from a set of size at least RRR, even after removal of other higher-degree vertices (recall that ∣A∣|A|∣A∣ decreases monotonically throughtout the algorithm). Or, in other words, at the start of the i-th iteration with currently available vertices AiA_iAi​ and higher-degree vertices XiX_iXi​ scheduled for removal, ∣Ai′∣:=∣Ai∖Xi∣&amp;gt;R|A&amp;#x27;_i| := |A_i &#92;setminus X_i| &amp;gt; R∣Ai′​∣:=∣Ai​∖Xi​∣&amp;gt;R. Using the bound (2) on the edge-count: eG(Ai′)≥β(∣Ai′∣2)=β∣Ai′∣(∣Ai′∣−1)2 e_G(A&amp;#x27;_i) &#92;geq &#92;beta &#92;binom{|A&amp;#x27;_i|}{2} = &#92;beta &#92;frac{|A&amp;#x27;_i|(|A&amp;#x27;_i|-1)}{2} eG​(Ai′​)≥β(2∣Ai′​∣​)=β2∣Ai′​∣(∣Ai′​∣−1)​ As we choose vtiv_{t_i}vti​​ with maximum degree from Ai′A&amp;#x27;_iAi′​, we know vtiv_{t_i}vti​​ must at least have the average degree (4) of Ai′A&amp;#x27;_iAi′​: deg⁡Ai′(vti)≥2eG(Ai′)∣Ai′∣≥β(∣Ai′∣−1)&#92;deg_{A&amp;#x27;_i}(v_{t_i}) &#92;geq &#92;frac{2e_G(A&amp;#x27;_i)}{|A&amp;#x27;_i|} &#92;geq &#92;beta (|A&amp;#x27;_i| - 1) degAi′​​(vti​​)≥∣Ai′​∣2eG​(Ai′​)​≥β(∣Ai′​∣−1) Recalling the definition of ∣Ai′∣|A&amp;#x27;_i|∣Ai′​∣: ∣Ai′∣−1=∣Ai∖Xi∣−1=∣Ai∣−∣Xi∣−1∣Ai∣−(ti−1)−1=∣Ai∣−ti&#92;begin{aligned} |A&amp;#x27;_i| - 1 = |A_i &#92;setminus X_i| - 1 &amp;amp;= |A_i| - |X_i| - 1 &#92;&#92; |A_i| - (t_i - 1) - 1 &amp;amp;= |A_i| - t_i &#92;end{aligned} ∣Ai′​∣−1=∣Ai​∖Xi​∣−1∣Ai​∣−(ti​−1)−1​=∣Ai​∣−∣Xi​∣−1=∣Ai​∣−ti​​ In total we remove ∣Xi∣+∣N(vti)∣+1|X_i| + |&#92;mathcal{N}(v_{t_i})| + 1∣Xi​∣+∣N(vti​​)∣+1 vertices from AiA_iAi​ in every round. Putting everything together: ∣Ai+1∣≤∣Ai∣−(∣Xi∣+∣N(vti)∣+1)≤∣Ai∣−(∣Xi∣+deg⁡Ai′(vti))≤∣Ai∣−(ti+β(∣Ai∣−ti))≤∣Ai∣−β∣Ai∣=∣Ai∣(1−β)&#92;begin{aligned} |A_{i+1}| &amp;amp;&#92;leq |A_i| - (|X_i| + |&#92;mathcal{N}(v_{t_i})| + 1) &#92;&#92; &amp;amp; &#92;leq |A_i| - (|X_i| + &#92;deg_{A&amp;#x27;_i}(v_{t_i})) &#92;&#92; &amp;amp;&#92;leq |A_i| - (t_i + &#92;beta (|A_i| - t_i) ) &#92;&#92; &amp;amp;&#92;leq |A_i| - &#92;beta|A_i| = |A_i| (1 - &#92;beta) &#92;end{aligned} ∣Ai+1​∣​≤∣Ai​∣−(∣Xi​∣+∣N(vti​​)∣+1)≤∣Ai​∣−(∣Xi​∣+degAi′​​(vti​​))≤∣Ai​∣−(ti​+β(∣Ai​∣−ti​))≤∣Ai​∣−β∣Ai​∣=∣Ai​∣(1−β)​ where we used that β≤1&#92;beta &#92;leq 1β≤1 for the last inequality We find that the set of available vertices AAA shrinks at least by a factor of (1−β)(1 - &#92;beta)(1−β) in every iteration. Together with the fact that the initial set AAA is V(G)V(G)V(G) we obtain a contradiction to the initial condition (1) on the number of vertices in GGG: ∣A∣≤(1−β)qN≤e−βqN≤R(5)&#92;tag{5} |A| &#92;leq (1 - &#92;beta)^q N &#92;leq e^{-&#92;beta q} N &#92;leq R ∣A∣≤(1−β)qN≤e−βqN≤R(5) Here we used the well-known inequality (1+x)≤ex(1 + x) &#92;leq e^x(1+x)≤ex. After qqq iterations, the initial set of available vertices has necessarily shrunk to a set of at most RRR vertices. Final bound Let us now finally give the bound on the number of independent sets of size exactly q+kq + kq+k. The bound (3) follows from the observation, that there are at most (Nq)&#92;binom{N}{q}(qN​) different ways to choose SSS and therefore the first qqq vertices of an independent set, and at most (Rk)&#92;binom{R}{k}(kR​) different ways to choose the kkk remaining vertices from AAA, which has size at most RRR. Another useful, but less sharp bounds, can be obtained from one of the various inequalities on the binomial coefficient: ∣I(G,q+k)∣≤Nqq!(Rk)(6)&#92;tag{6} |&#92;mathcal{I}(G, q + k)| &#92;leq &#92;frac{N^q}{q!}&#92;binom{R}{k} ∣I(G,q+k)∣≤q!Nq​(kR​)(6) Wikipedia has an extensive collection of such bounds. Overview of notation Vertex set V(G)V(G)V(G) Edge count eG(X)e_G(X)eG​(X): Number of edges in GGG on vertex set XXX Neighborhood N(v)&#92;mathcal{N}(v)N(v): set of vertices adjacent to vvv Induced subgraph G[A]G[A]G[A]: Obtained from GGG by keeping all vertices in AAA and their edges among them Independence number α(G)&#92;alpha(G)α(G): Size of largest independent set in GGG Independent sets I(G)&#92;mathcal{I}(G)I(G): Collection of all independent sets in GGG Independent sets I(G,m)&#92;mathcal{I}(G, m)I(G,m): Collection of all independent sets in GGG of size exactly mmm Further reading Some ressources for further details, including applications to various combinatorial problems and extensions of the container method to hypergraphs, are given below: Wikipedia: https://en.wikipedia.org/wiki/Container_method Survey paper by Samotij: https://arxiv.org/pdf/1412.0940.pdf Lecture notes by Liu: https://homepages.warwick.ac.uk/staff/H.Liu.9/topic-comb-lecture15.pdf References https://arxiv.org/pdf/1412.0940.pdf ↩︎ https://doi.org/10.1016/0012-365X(82)90204-7 ↩︎",
            "id": "https://umcconnell.github.io/posts/2024-03-19-kleitman-winston/",
            "tags": ["posts", "math", "combinatorics", "graph theory"]
        },
        {
            "title": "Meta Blog: Advanced",
            "url": "/posts/2021-03-31-meta-blog-advanced/",
            "updated": "2021-03-31T00:00:00Z",
            "description": "A blog post on how to create your own blog (posts) with 11ty. Part II: Advanced technical details.",
            "content": "Part 1 of this series went through the basic setup and customization of this blog for your own purposes. In this part, I will go through a few technical details, tips and additional notes, that can allow you to extend the site and troubleshoot errors. This part can also serve as a project reference or documentation of some sort. Overview Before we go into detail about different aspects of the website, here’s a quick overview of all the different folders and what they contain: . ├── config Configuration for plugins (e.g. markdown-it, KaTeX) ├── src │ ├── assets Website assets │ │ ├── fonts │ │ ├── icons │ │ ├── images │ │ │ ├── favicon Icons and images for Web App │ │ │ └── posts Images in posts │ │ ├── other Other assets (e.g. PGP key) │ │ ├── scripts JavaScript │ │ │ └── modules │ │ └── styles │ │ ├── base Base styles (e.g. markdown, CSS reset) │ │ ├── components Styling for various components │ │ └── utils CSS utilities │ ├── components Nunjucks components (e.g. card, tags) │ ├── data Website metadata │ ├── includes Nunjucks includes (e.g. footer, navbar) │ ├── layouts Nunjucks page layouts (e.g. base, post) │ ├── pages Concrete pages (e.g. about, post archive) │ └── posts Markdown posts └── utils JS utilities (e.g. filters, shortcodes) Styling Styling is done using SCSS . All stylesheets are located in src/assets/styles . The styles are then imported and bundled in main.scss. The styles are grouped into three main folders: base : The base styling comprises basic stylesheets used globally throughout the page, such as normalization or typography. These styles are very generic, meaning you probably want to modify styles in different places, such as the components/ folder for specific components. components : These styles consist of more specific styles tailored to certain components, such as the footer, the navigation or the post tags. This is probably the best place to modify or add new styles when customizing the website. utils : The utilities are mostly SCSS-specific functions, that make use of SCSS’s scripting features. This is also where the global variables for colors, breakpoints, etc. are defined for the entire page. The compilation process, including minification, and error handling is defined in the styles.11ty.js file. In practice, you shouldn’t need to modify this file. Theming The blog supports adaptive light and dark themes out of the box (based on the prefers-color-scheme media query). The different color palettes are defined in _variables.scss under the $themes key. Individual properties are themed using the t SCSS mixin . This is for example how links are themed throughout the blog: a { @include t(color, &#39;link-color&#39;); text-decoration: underline; } The mixin takes a CSS property as the first argument, followed by a variable name referencing the desired color. This name refers to a field from the $themes map, which means you can only refer to colors defined as part of a theme. The mixin takes additional optional arguments, which you can find in the mixin’s source . Breakpoints Breakpoints are also quickly defined using SCSS mixins. There are two mixins, mq and mq-down, which provide breakpoints starting at, and going up to, a certain width. The mixins take the name of a breakpoint, as defined in the global variables. An example use of breakpoints is when styling the navbar. The following declaration hides the navigation burger menu for large screens (starting at 940px in width) and up: @include mq(lg) { &amp;amp;__toggle { display: none; } // ... } Markdown Markdown files are compiled using markdown-it . The configurations for markdown-it and it’s plugins are located in the config/ folder. The styles for Markdown documents, such as posts, are located in src/assets/styles/base/_markdown.scss . Note that Markdown documents must be wrapped in an element with class .markdown for the styles to take effect. You can thus use the Markdown styles in HTML/Nunjucks files by wrapping sections in such an element. Plugins The following markdown-it plugins are used in this blog: markdown-it-anchor @iktakahiro/markdown-it-katex Additionally, two custom plugins, one for the arrow icons after external links, and one for the anchor links when hovering over headings, are implemented in the config folder. Posts The blog supports several non-standard additions to Markdown, that add blog-specific functionality to your posts. Nunjucks expressions You can write Nunjucks markup directly in your markdown posts, just as you would in the other pages. Just wrap the expression between two curly braces: {{ Nunjucks expression }}. For example, you can conveniently link to the page’s code repository, directly in Markdown, like this: You can find the source code [here]({{ meta.code.repo }}). This gives: You can find the source code here . Shortcodes Shortcodes are another very practical feature of Nunjucks in Markdown. All shortcodes are defined in utils/shortcodes.js , and you can add more. Shortcodes expand to a longer parameterized expression. Standard shortcodes only take arguments, such as in this example: {% &#39;icon pencil&#39; %} This produces an SVG element: The standard shortcodes available out of the box are: icon to embed icons from src/assets/icons/ ytvideo to embed YouTube videos based on their id There are also paired shortcodes, that wrap a markup section, such as this one: {% msg &#39;info&#39; %} An informative message that **even** supports _Markdown_! {% endmsg %} This produces the following: INFO An informative message that even supports Markdown! The paired shortcodes available out of the box are: msg for message boxes details for an expandable HTML summary/details element KaTeX You can also include math expressions in your post. The expressions are compiled using KaTeX , which allows you to write TeX-like expressions. All KaTeX configurations are located in config/markdown-it/katex.js . For inline math expressions, wrap your code in single dollar signs: $math$. For example, you can easily include fractions: A fraction $&#92;frac{a}{b}$ includes a numerator $a$ and a denominator $b$. This produces the following text: A fraction ab&#92;frac{a}{b}ba​ includes a numerator aaa and a denominator bbb. For blocks of math, wrap your code in double dollar signs: $$ math $$. For example, you can display Euler’s identity: Euler&#39;s identity: $$e^{i &#92;pi} = -1$$ This results in: Euler’s identity: eiπ=−1e^{i &#92;pi} = -1 eiπ=−1 You can find all supported expressions and formatting options in the KaTeX docs . Nunjucks Nunjucks is used as the templating language for the blog. There are several places where Nunjucks is used: src/components/ : Nunjucks allows imports of so-called macros , which are used to represent the components. Macros are similar to functions and accept arguments to construct a parameterized output. src/includes/ : Nunjucks’ includes allow you to literally include chunks of markup as reusable units. This is used for non-variant parts of the website, such as the footer, header, etc… src/layouts/ : Layouts are page skeletons that are used as a common base among pages. The base layout is the HTML skeleton for all other pages and layouts. The post layout extends this base layout to include additional stylesheets for code highlighting or the utterances comment widget. src/pages/ : The pages represent concrete pages of the website, such as the About page or the Projects page. These are written with Nunjucks, but already include front matter for 11ty. 11ty Most of the 11ty-related configuration is placed in the .eleventy.js file. Note, that if you are serving this website from a subproject on Github pages, i.e. when you are not using GH_USERNAME.github.io, but rather GH_USERNAME.github.io/PROJECT/, you must change the 11ty pathPrefix field in the configuration file. The setting is commented out in this website’s configuration. In development mode (npm run dev), Markdown posts and images in the src/posts/drafts/ folder will also be built and served. They do, however, not appear in production mode and are not tracked by git. Icons All icons placed in the src/assets/icons/ folder will be grouped into an SVG sprite to improve loading time. The icons can then be used via the icon shortcode. Plugins The 11ty plugins used in this blog are: @11ty/eleventy-plugin-rss @11ty/eleventy-plugin-syntaxhighlight @11ty/eleventy-navigation You can find the full list of available plugins in the 11ty docs Webpack &amp;amp; Babel All JavaScript code referenced in src/assets/scripts/main.js is transpiled to backwards compatible JavaScript using babel to support older browsers. The code files are then bundled using webpack , with the webpack configuration file located at src/assets/scripts/scripts.11ty.js . The bundling process uses an in-memory file system to bundle the scripts in memory and return the bundled result as a reusable JS string. Github The site is automatically built and linted using the provided Github Actions workflows. The workflow files are located in the .github/workflows/ folder. The lint action uses Prettier to check the code for styling and formatting issues. See the VSCode section for information on the Prettier extension to automatically format your code when you save. VSCode For VSCode users, I recommend installing the Prettier extension to automatically format your code and posts on save. All recommended plugins are listed in the .vscode/ folder. These recommendations should be automatically suggested when first opening the project in the editor. That was it. Thanks for reading!",
            "id": "https://umcconnell.github.io/posts/2021-03-31-meta-blog-advanced/",
            "tags": ["posts", "blog", "webdev"]
        },
        {
            "title": "Meta Blog: Basics",
            "url": "/posts/2021-03-30-meta-blog-basics/",
            "updated": "2021-03-30T00:00:00Z",
            "description": "A blog post on how to create your own blog (posts) with 11ty. Part I: The basics.",
            "content": "In my Hello Internet post I announced my intention to write a post on how I set up this blog and how you can do the same. The time has now finally come, and the original idea has morphed into a two-part series. Enjoy! INFO This tutorial is primarily meant for beginners. It explains cloning this blog from Github, personalizing it with custom icons, name and color, and finally publishing it with Github pages. Part 2 goes further into the technical details of the blog. If you prefer getting started right away, feel free to skip to the Getting started section. Also, there is a video tutorial available for a visual guide on the setup process. Static Site Before we dive into building a static website, it is helpful to quickly look at what a static website actually is. On Wikipedia , a static website is defined as “[…] a web page that is delivered to the user’s web browser exactly as stored, in contrast to dynamic web pages […]”. Concretely, this means no dynamic pages, no fancy PHP scripts and no on-page user login. Only plain good ol’ HTML, with some additional CSS and JavaScript Why would one want such a boring thing? Well, it turns out there’re quite a lot of advantages to static sites, if all you have is static content. Static sites are… faster: only HTML, CSS, JS and images are served safer: no login systems, etc. means a minimal attack surface more accessible: an old browser and a slow internet connection is fine cheaper: free hosting available, e.g. with Github Pages or Netlify … than their dynamic counterparts. A static site doesn’t necessarily mean being limited in functionality, or having a site consisting of only text and images. There are a lot of possibilities on the front-end, ranging from embedded YouTube videos and RSS feeds to a comment system (more on this later on and in Part 2). SSGs When creating your static blog, it can be helpful to use a Static Site Generator (SSG). An SSG helps to make the development and editing process comfortable. Instead of writing your posts in plain HTML, you can write them in Markdown and have the SSG convert your posts to HTML files. This is a similar idea to the concept of compiling code from a higher level language (such as C or Rust) to machine code, allowing you to write fast code in a simpler and human-readable form. The process of “compiling” your website will be referred to as building in the following. In this guide we’ll be talking about setting up and configuring an SSG called 11ty (pronounced eleventy). 11ty runs on top of Node , which allows you to benefit from the massive JavaScript ecosystem and write your own plugins in JavaScript. Getting started Prerequisites Before we get started with the setup, make sure you have the following prerequisites: git: You can find installation instructions for all platforms here github: You can create an account here node: You can download node from here Cloning Start by cloning my blog from the Github repository. In a terminal, run: git clone https://github.com/umcconnell/umcconnell.github.io.git blog cd blog/ This will clone the code into the folder blog/. Installing In the blog root folder, install the required dependencies using npm: npm install The installation might take a minute or two. Running Once the installation has finished, you are ready to run the build process and serve the blog on your localhost. Run: npm run dev You should be able to navigate to localhost:8080 and see the blog as it appears here. Personalizing Now the blog is ready for customization. To do that, you will need to change four files: package.json LICENSE src/site.webmanifest src/data/meta.json package.json The package.json file describes your node project. It mainly contains information about the project’s source code and package dependencies. You can add your name to the author field and change the description field to your liking. The name and repository.url fields should contain your project name and source code repository. The project name should be GH_USERNAME.github.io, the repository url http://github.com/GH_USERNAME/GH_USERNAME.github.io accordingly. Replace GH_USERNAME with your Github username. LICENSE Modify the LICENSE file to mention your name as the Copyright owner in the first line. src/site.webmanifest The src/site.webmanifest file describes the web app behavior of your blog. This controls how the website will be presented when a user adds the blog to their home screen, i.e. installing the web app. Here, you can change the name and short_name field. src/data/meta.json Finally, the last file to personalize is src/data/meta.json. This file contains important meta-information about the blog, such as the author, the source and comment repositories for the blog, etc. Make sure to change the title and author fields, which will for example change the footer or the about page of the blog. The url should contain the final URL of the website, i.e. GH_USERNAME.github.io, where GH_USERNAME is your Github username. Custom domain If you do not want to use a custom domain name for your website, such as example.com, set the custom_domain field to false. If you own a domain and want to set it up for your blog, you can specify your custom domain in this field. This then generates a CNAME file in the build output for you to configure with Github pages. See this article in the Github docs on for instructions on how to set up a custom domain for your site. Most importantly however, change the fields in the code section of the webmanifest: The repo entry should point to the Github repository of the website (https://github.com/GH_USERNAME/GH_USERNAME.github.io). The comments field points to the repository that will save user comments from the blog. This should be GH_USERNAME/comments. We’ll create this repo later. Once you’ve saved the files, you should be able to see your name appear on the blog. Icons To change the icons that appear in the header, when installing the web app, etc., navigate to src/assets/images/. The avatar, displayed in the header of the website, can be changed by replacing the avatar.png file with your own image. You may also change the email.png image, which is displayed in the about page as your contact information. The icons used for the web app are located in the favicon/ subfolder. When replacing these icons with your own, custom icons, make sure to keep the naming and size of the individual files. Colors If you want, you can further personalize the blog with custom colors, styles, and more. All styles and related configurations are located in the src/assets/styles/ folder. Stylesheets are written in SCSS . Note that all valid CSS is valid SCSS, which means you can style the blog in plain CSS if that is more familiar to you. More specifically, the colors used throughout the web page can be changed in the utils/_variables.scss file. The main theme color is defined by the $brand-color-primary variable.These variables are used in all the other styles, which means it should be enough to change the colors in this file. Comments The last thing to do personalize your new blog is to activate the comments functionality. The blog uses a free service called utterances , which takes care of managing your comments. It will display a widget at the bottom of your blog post, that lets users leave a comment. Note that the comments widget is not displayed when you are in development mode and serving your blog on localhost (npm run dev). It will appear in the online version. The comments are stored in a Github repository, which means you don’t need to worry about storing your comments. To be able to store comments in a Github repository on your behalf, you will need to install the the utterances Github app . Follow the link and click the install button. You will need to grant the app access to your repositories. You can later restrict access to the comments repo only in your settings . First post Your new blog should probably contain a introductory post. All posts are written in Markdown and located in src/posts/. Go ahead and delete the posts already in the folder (all files ending with .md). Next, create a file called YYYY-MM-DD-hello-world.md, where YYYY, MM and DD refers to the current date (e.g. 2021-03-14). You place the following text into the file and modify it to your liking. Changes you make to the file should be reflected instantaneously in your web browser. --- title: Hello World date: 2021-03-14 description: &gt; Hello World introductory post. tags: - hello - world - intro --- Hi everyone! This is my _brand new_ blog. **Enjoy**! That’s it! You’re blog is ready to go online. Publishing After customizing the blog, we are now ready to publish our blog. We will publish the blog on Github pages . After following these steps, your page will be available at https://GH_USERNAME.github.io. Committing Start by committing all your customization changes to git. In the root folder of the blog, run: git add . git commit -av Creating Repositories Next, we’ll create the Git repositories that will hold the source code of your blog and the comments to your posts. In your web browser, navigate to github.com/new to create a new repository. For the comments repo, enter comments as the repository name. Make sure, the repo visibility is set to “Public”, before hitting the “Create repository” button. Repeat this step for the repo that is going to hold the blog’s source code. Enter GH_USERNAME.github.io as repo name (where GH_USERNAME is your Github username) and select the visibility “Public”. Then, create the repository. You should see a set of instructions to publish your code. Note the instructions to “push an existing repository from the command line”. When executing these instructions in the root folder of your blog, you will need to change one command. Because you have cloned the original blog code from Github, it already has a remote git origin set. You will need to use set-url instead of add here: git remote set-url origin https://github.com/GH_USERNAME/GH_USERNAME.github.io.git git branch -M main git push -u origin main Github Pages The last step is to publish your pages using Github pages. In your repository containing the blog source, navigate to the “Settings” tab. Almost at the bottom of the page, you should find a “Github pages section”. From the source drop-down, select the “gh-pages” branch. After hitting the save button, your site should be available online. Video tutorial My friend Boldizsar Zopcsak and I recorded a video tutorial about this whole procedure a little while ago. The video goes through the basics of cloning, personalizing and publishing your next blog. Feel free to have a look: * { padding: 0; margin: 0; overflow: hidden; } html,body { height: 100%; } img,span { position: absolute; width: 100%; top: 0; bottom: 0; margin: auto; } span { display: flex; background-color: rgba(51, 51, 51, 40%); align-items: center; justify-content: center; font: 48px/1.5 sans-serif; color: white; text-shadow: 0 0 1em black; } ▶ &quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen title=&quot;Embedded Youtube Video. Click to play.&quot; loading=&quot;lazy&quot; &gt; For a look at the technical details of this blog, head over to Part 2 of this series.",
            "id": "https://umcconnell.github.io/posts/2021-03-30-meta-blog-basics/",
            "tags": ["posts", "blog", "webdev", "beginner"]
        },
        {
            "title": "Fibonacci in Rust",
            "url": "/posts/2021-03-13-fibonacci-rust/",
            "updated": "2021-03-13T00:00:00Z",
            "description": "This post goes through different approaches to generating the Fibonacci sequence in Rust. It compares the speed of these approaches using the benchmarking crate criterion.",
            "content": "You’ve probably already heard of the Fibonacci sequence. It is a sequence of numbers named after the mathematician Leonardo of Pisa , that’s generated using a simple rule, yet pops up in many unexpected places in math and nature, often in relation to the golden ratio. To generate the sequence, start with the sequence 1, 1. Then, generate the next element in the sequence by adding up the last two elements: 1, 1 1, 1, 2 1, 1, 2, 3 … Mathematically, this can elegantly be expressed using recursion. In this formula, n represents a given position in the sequence starting with 0. fib(n)={1if n≤1fib(n−2)+fib(n−1)if n&amp;gt;1fib(n) = &#92;begin{cases} 1 &amp;amp;&#92;text{if } n &#92;leq 1 &#92;&#92; fib(n-2)+fib(n-1) &amp;amp;&#92;text{if } n &#92;gt 1 &#92;end{cases} fib(n)={1fib(n−2)+fib(n−1)​if n≤1if n&amp;gt;1​ Implementation We will be implementing the Fibonacci logic using Rust. Rust is a programming language initially developed at Mozilla that can guarantee memory safety, while at the same time being super fast. We’ll try out different approaches and see which one runs fastest. If you want to follow along on your computer, you can find simple installation instructions for Rust and cargo, the Rust package manager, for just about any OS, on the Rust homepage: https://www.rust-lang.org/tools/install . Alternatively, you can also code along online on the Rust playground without having to install anything! Setup If you are not coding along on your machine, feel free to skip this section. First, let’s create a new Rust library project from the command-line using cargo: cargo new --lib rust_fibonacci cd rust_fibonacci/ The file src/lib.rs is where we’ll be writing source code later on. You can delete it’s pregenerated contents for now, as we won’t go through writing tests for such a simple program. Now, the only aspect missing is the benchmarking, so that we can compare the different approaches to calculating the Fibonacci sequence. To do this, we can use the criterion crate , which allows us to write benchmarks and run them using cargo. Add the following code to the Cargo.toml file, just below the [dependencies] section at the bottom: [dev-dependencies] criterion = &quot;0.3&quot; [[bench]] name = &quot;fibonacci_benchmark&quot; harness = false Create a directory called benches in the base directory and place an empty file called fibonacci_benchmark.rs into it. Once you’re done, the rust_fibonacci/ project directory content should look something like this: . ├── benches │ └── fibonacci_benchmark.rs ├── Cargo.lock ├── Cargo.toml └── src └── lib.rs #1: Standard INFO If you&#39;re using the Rust playground, just add all the code examples above the `main` function. The playground just allows you to use one single file to write your code in. Now, let’s get coding! Probably the most straightforward way to implement the Fibonacci sequence, would be to just start with two variables a and b, that keep track of the last two elements of the sequence and build from there. Let’s do that! Add this code to src/lib.rs: pub fn fib_standard(n: usize) -&gt; usize { let mut a = 1; let mut b = 1; for _ in 1..n { let old = a; a = b; b += old; } b } Notice the pub keyword: We use it, so that we can import the code from other files. This will be useful when benchmarking the functions later on. Here, we declare a and b as mut, i.e. mutable, to allow us to mutate or change their values. In Rust, all variables are imutable by default. We start our loop at 1, because the first two values are already defined and the range is non-inclusive for its end. #2: Recursion Another approach to implementing the Fibonacci algorithm would be to just translate the recursive mathematical definition from the introduction into Rust code. Add the following function in src/lib.rs: pub fn fib_recursive(n: usize) -&gt; usize { match n { 0 | 1 =&gt; 1, _ =&gt; fib_recursive(n-2) + fib_recursive(n-1), } } In this case, the match operator comes in really handy. It works just like the conditional function definition in math! It is short, clean and concise. This means we don’t have to write endless if { ... } else if { ... } else { ... } clauses. One last thing to note, is the implicit return. We did not have to use the return statement, because the last expression is automatically returned. However, it is important not to end with a semi-colon, which would make the function return nothing (or (), to be more precise). When we take a close look at this function, it might become clear that it is pretty inefficient. When calculating fib_recursive(n), we end up calculating the Fibonacci sequence twice every step down from n, although it would be enough to calculate the sequence once. This is where memoization comes in. Runtime complexity The recursive approach has the runtime complexity O(2n)O(2^n)O(2n). This is because the time complexity of fib_recursive(n) approximately doubles for every n, because it computes fib_recursive(n-1) and fib_recursive(n-2). If we want to be more exact about the statement “it approximately doubles”, we can say the following about this factor aaa: an=a(n−1)+a(n−2)∣:a(n−2)a2=a+1a=1±52 &#92;begin{aligned} a^n &amp;amp;= a^{(n-1)} &amp;amp;+ &amp;amp;a^{(n-2)} &#92;quad | : a^{(n-2)} &#92;&#92; a^2 &amp;amp;= a &amp;amp;+ &amp;amp;1 &#92;&#92; a &amp;amp;= &#92;frac{1 &#92;pm &#92;sqrt{5}}{2} &#92;end{aligned} ana2a​=a(n−1)=a=21±5​​​++​a(n−2)∣:a(n−2)1​ We can safely ignore the second solution 1−52&#92;frac{1 - &#92;sqrt{5}}{2}21−5​​, which is negative. This leaves us with a=1+52a = &#92;frac{1 + &#92;sqrt{5}}{2}a=21+5​​, the golden ratio . What a coincidence! The asymptotically tight bound on the running time of fib_recursive is thus Θ(an)&#92;Theta(a^n)Θ(an), where aaa is the golden ratio. You can find out more about asymptotic notation in computer science on Khan Academy . #3: Memoization We will use a std::collections::HashMap , which is similar to a dict in Python or an Object in JavaScript, to keep track of all the values we’ve already calculated. Then, we can quickly check, whether a given value has already been encountered and can return this, before wasting time on a redundant calculation. Add this code to your lib.rs file: use std::collections::HashMap; pub fn fib_memoization(n: usize, memo: &amp;amp;mut HashMap&amp;lt;usize, usize&gt;) -&gt; usize { if let Some(v) = memo.get(&amp;amp;n) { return *v; } let v = match n { 0 | 1 =&gt; 1, _ =&gt; fib_memoization(n-2, memo) + fib_memoization(n-1, memo), }; memo.insert(n, v); v } We first check, whether the current n is in the HashMap, by checking whether the value at n is Some. If no value has jet been recorded, memo.get(&amp;amp;n) will return None and the pattern won’t match. Next, we compute the sequence value just as when using plain recursion. The only difference is, that we save the value to our memo before returning it. Notice how we write &amp;amp;mut HashMap&amp;lt;usize, usize&amp;gt; in the function definition. This is part of Rust’s borrow checker, that ensure memory safety for our program. By declaring the memo as mutable, Rust ensures that only one part of the program has write access at a time and that no other part of the program can read from the memo while we have write access to it and might be modifying it unexpectedly. #4: Iterator One last way to implement the Fibonacci sequence that this post will cover is using Rust iterators. You might be familiar with this concept, especially if you’ve already used Generators in JavaScript or Iterators in Python . Rust iterators implement the Iterator trait and expose a next function, which returns the next element of the iterator or None, if the iteration is over. Lets implement this iterator principle using a struct. The struct will save the last two elements a and b of the sequence, starting at 1. It will then generate the next value just as in the standard approach: pub struct FibIterator { a: usize, b: usize } impl Default for FibIterator { fn default() -&gt; Self { FibIterator { a: 1, b: 1 } } } impl Iterator for FibIterator { type Item = usize; fn next(&amp;amp;mut self) -&gt; Option&amp;lt;Self::Item&gt; { let curr = self.a; self.a = self.b; self.b = curr + self.a; Some(curr) } } A few things to notice here. First, notice how we all methods of the struct are wrapped in impl blocks. This separates the struct definition from it’s methods, helping your code stay clean. Also, we write a default method that takes no arguments and returns an initialized FibIterator. As this method is not associated to a struct instance, i.e. an initialized FibIterator with concrete values for a and b, it is called an associated function. We can call these types of functions using ::. In this case, we would call FibIterator::default() to construct a new instance. The Iterator and Default traits are implemented using the impl Foo for Bar statement. In the impl block of the Iterator trait, we define a next function that just returns the sum of the two last elements in the sequence. This way, the iterator can just keep generating new integers of the sequence on demand. Because iterators in Rust are lazy, these integers are only generated when needed. INFO A trait is a set of common functions all structs must implement, to have this trait. In the case of Iterator, this is solely the next function. Traits are useful, because they allow other functions to accept different types, while making sure that all of these different types share a common interface. When implementing Iterator, this trait unlocks a whole set of other useful methods such as skip, take, filter, and many more, that all rely on the next method we implemented. These all come built-in with the trait and we don’t need any additional work to implement these. Iterators are an important part of Rust, as they allow to write code in a concise functional style, while incurring no additional performance. When compiling the code, Rust will optimize the operations away and turn the iterators into classical for loops in the background. That means you don’t have to choose between writing fast and clean code, you can do both! Bechmarking Finally, we will compare the different approaches by benchmarking the different functions. Add the following code to the benches/fibonacci_benchmark.rs file. Note that benchmarking does not seem possible on the online Rust playground. use criterion::{criterion_group, criterion_main, BenchmarkId, Criterion}; use rust_fibonacci::*; use std::collections::HashMap; fn bench_fibs(c: &amp;amp;mut Criterion) { let mut group = c.benchmark_group(&quot;Fibonacci&quot;); for i in [20, 21].iter() { group.bench_with_input(BenchmarkId::new(&quot;Standard&quot;, i), i, |b, i| { b.iter(|| fib_standard(*i)) }); group.bench_with_input(BenchmarkId::new(&quot;Recursion&quot;, i), i, |b, i| { b.iter(|| fib_recursive(*i)) }); group.bench_with_input(BenchmarkId::new(&quot;Memoization&quot;, i), i, |b, i| { b.iter(|| { let mut memo = HashMap::new(); fib_memoization(*i, &amp;amp;mut memo); }) }); group.bench_with_input(BenchmarkId::new(&quot;Iterator&quot;, i), i, |b, i| { b.iter(|| { FibIterator::new().nth(*i).unwrap(); }) }); } group.finish(); } criterion_group!(benches, bench_fibs); criterion_main!(benches); This code creates a test group called Fibonacci and benchmarks the four different approaches using the same input. Run the benchmark in your terminal: cargo bench Once the benchmarks are done, you can view a nice HTML report in your browser by opening target/criterion/Fibonacci/report/index.html. Running on my machine gave me the following stats: You can clearly see, that the naive recursive solution is the least performant approach, as its execution time increases (exponentially, but not visible with 2 inputs) with the workload. The memoized version, in contrast, shows a great improvement, but it still incurs the performance overhead of initializing and managing the memo, making it less performant than the two last approaches. The iterator and standard seem to be indistinguishable. On my machine, the execution of the iterator takes ~34ns for both inputs, the standard approach around ~4.5ns for both inputs. You can find more detailed graphs and charts for every function in the corresponding target/criterion/Fibonacci/&amp;lt;APPROACH&amp;gt;/report/index.html folder. Conclusion We’ve implemented and benchmarked four different approaches to generating the Fibonacci sequence. Although the recursive solution is short and concise, it is by far the least performant and can become too slow to calculate for larger inputs. The memoized solution is interesting, in that it combines the conciseness of the recursive approach with a greater speed. The standard approach, on the other hand, seems to be the fastest, but it is arguably the least elegant. Finally, the iterator solution appears to be by far the most versatile while at the same time being very fast. Additionally, it allows the user to work with the sequence in a very convenient way, e.g. by filtering, mapping, etc. Overall, it becomes clear that iterators are a very versatile and performant aspect of Rust, that are also worth considering in other languages such as Python or JavaScript. The final code of this project is open source and available here: https://github.com/umcconnell/rust_fibonacci Feedback, questions, comments or improvements are welcome! Thanks for reading.",
            "id": "https://umcconnell.github.io/posts/2021-03-13-fibonacci-rust/",
            "tags": ["posts", "programming", "rust", "fibonacci"]
        },
        {
            "title": "Hello Internet",
            "url": "/posts/2021-03-11-hello-internet/",
            "updated": "2021-03-11T00:00:00Z",
            "description": "Kicking off my blog with the mandatory &quot;Hello World&quot; introductory post... More posts about software, technology and science to come!",
            "content": "Hi! This is the first post on my new blog, and I’m really excited. I hope to write more in the coming weeks and months, especially about technical and software-related topics. My goal is to write about current software side projects and things I’ve learned, all in the spirit of “Stay curious, keep learning”. Depending on how that works out, I’ll adapt if needed. Outlook A few topics I’d like to cover soon are AI, Rust and how I set up this blog, to give some ideas in case you would like to do the same. In the meantime, as this blog is entirely open source, I invite you to check out the source code on Github, fork it, make it your own, or whatever you want. Why?!? I hope to learn something useful from this experience and gain some more experience building websites. Writing down ideas and summarizing problems is a good exercise, all while improving writing skills. A blog also let’s me document findings and ideas for later use or for someone else to be inspired. And maybe I can even help solve a problem on the way or motivate to learn something new! Feel free to comment on any post, give feedback, suggest improvements, correct me or whatever else you think is appropriate. Cheers! - Ulysse",
            "id": "https://umcconnell.github.io/posts/2021-03-11-hello-internet/",
            "tags": ["posts"]
        }]
}